// Code generated by mockery v2.53.5. DO NOT EDIT.

package storage

import (
	common "github.com/Blackdeer1524/GraphDB/src/pkg/common"
	mock "github.com/stretchr/testify/mock"

	txns "github.com/Blackdeer1524/GraphDB/src/txns"
)

// MockEngine is an autogenerated mock type for the Engine type
type MockEngine struct {
	mock.Mock
}

type MockEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEngine) EXPECT() *MockEngine_Expecter {
	return &MockEngine_Expecter{mock: &_m.Mock}
}

// AllVerticesWithValue provides a mock function with given fields: txnID, vertTableToken, vertIndex, logger, field, value
func (_m *MockEngine) AllVerticesWithValue(txnID common.TxnID, vertTableToken *txns.FileLockToken, vertIndex Index, logger common.ITxnLoggerWithContext, field string, value []byte) (VerticesIter, error) {
	ret := _m.Called(txnID, vertTableToken, vertIndex, logger, field, value)

	if len(ret) == 0 {
		panic("no return value specified for AllVerticesWithValue")
	}

	var r0 VerticesIter
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext, string, []byte) (VerticesIter, error)); ok {
		return rf(txnID, vertTableToken, vertIndex, logger, field, value)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext, string, []byte) VerticesIter); ok {
		r0 = rf(txnID, vertTableToken, vertIndex, logger, field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(VerticesIter)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext, string, []byte) error); ok {
		r1 = rf(txnID, vertTableToken, vertIndex, logger, field, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_AllVerticesWithValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllVerticesWithValue'
type MockEngine_AllVerticesWithValue_Call struct {
	*mock.Call
}

// AllVerticesWithValue is a helper method to define mock.On call
//   - txnID common.TxnID
//   - vertTableToken *txns.FileLockToken
//   - vertIndex Index
//   - logger common.ITxnLoggerWithContext
//   - field string
//   - value []byte
func (_e *MockEngine_Expecter) AllVerticesWithValue(txnID interface{}, vertTableToken interface{}, vertIndex interface{}, logger interface{}, field interface{}, value interface{}) *MockEngine_AllVerticesWithValue_Call {
	return &MockEngine_AllVerticesWithValue_Call{Call: _e.mock.On("AllVerticesWithValue", txnID, vertTableToken, vertIndex, logger, field, value)}
}

func (_c *MockEngine_AllVerticesWithValue_Call) Run(run func(txnID common.TxnID, vertTableToken *txns.FileLockToken, vertIndex Index, logger common.ITxnLoggerWithContext, field string, value []byte)) *MockEngine_AllVerticesWithValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(*txns.FileLockToken), args[2].(Index), args[3].(common.ITxnLoggerWithContext), args[4].(string), args[5].([]byte))
	})
	return _c
}

func (_c *MockEngine_AllVerticesWithValue_Call) Return(_a0 VerticesIter, _a1 error) *MockEngine_AllVerticesWithValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_AllVerticesWithValue_Call) RunAndReturn(run func(common.TxnID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext, string, []byte) (VerticesIter, error)) *MockEngine_AllVerticesWithValue_Call {
	_c.Call.Return(run)
	return _c
}

// CountOfFilteredEdges provides a mock function with given fields: txnID, vertSystemID, vertTableToken, vertIndex, logger, filter
func (_m *MockEngine) CountOfFilteredEdges(txnID common.TxnID, vertSystemID VertexSystemID, vertTableToken *txns.FileLockToken, vertIndex Index, logger common.ITxnLoggerWithContext, filter EdgeFilter) (uint64, error) {
	ret := _m.Called(txnID, vertSystemID, vertTableToken, vertIndex, logger, filter)

	if len(ret) == 0 {
		panic("no return value specified for CountOfFilteredEdges")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext, EdgeFilter) (uint64, error)); ok {
		return rf(txnID, vertSystemID, vertTableToken, vertIndex, logger, filter)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext, EdgeFilter) uint64); ok {
		r0 = rf(txnID, vertSystemID, vertTableToken, vertIndex, logger, filter)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext, EdgeFilter) error); ok {
		r1 = rf(txnID, vertSystemID, vertTableToken, vertIndex, logger, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_CountOfFilteredEdges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountOfFilteredEdges'
type MockEngine_CountOfFilteredEdges_Call struct {
	*mock.Call
}

// CountOfFilteredEdges is a helper method to define mock.On call
//   - txnID common.TxnID
//   - vertSystemID VertexSystemID
//   - vertTableToken *txns.FileLockToken
//   - vertIndex Index
//   - logger common.ITxnLoggerWithContext
//   - filter EdgeFilter
func (_e *MockEngine_Expecter) CountOfFilteredEdges(txnID interface{}, vertSystemID interface{}, vertTableToken interface{}, vertIndex interface{}, logger interface{}, filter interface{}) *MockEngine_CountOfFilteredEdges_Call {
	return &MockEngine_CountOfFilteredEdges_Call{Call: _e.mock.On("CountOfFilteredEdges", txnID, vertSystemID, vertTableToken, vertIndex, logger, filter)}
}

func (_c *MockEngine_CountOfFilteredEdges_Call) Run(run func(txnID common.TxnID, vertSystemID VertexSystemID, vertTableToken *txns.FileLockToken, vertIndex Index, logger common.ITxnLoggerWithContext, filter EdgeFilter)) *MockEngine_CountOfFilteredEdges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(VertexSystemID), args[2].(*txns.FileLockToken), args[3].(Index), args[4].(common.ITxnLoggerWithContext), args[5].(EdgeFilter))
	})
	return _c
}

func (_c *MockEngine_CountOfFilteredEdges_Call) Return(_a0 uint64, _a1 error) *MockEngine_CountOfFilteredEdges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_CountOfFilteredEdges_Call) RunAndReturn(run func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext, EdgeFilter) (uint64, error)) *MockEngine_CountOfFilteredEdges_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEdgeTable provides a mock function with given fields: txnID, tableName, schema, srcVertexTableFileID, dstVertexTableFileID, cToken, logger
func (_m *MockEngine) CreateEdgeTable(txnID common.TxnID, tableName string, schema Schema, srcVertexTableFileID common.FileID, dstVertexTableFileID common.FileID, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, tableName, schema, srcVertexTableFileID, dstVertexTableFileID, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for CreateEdgeTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, string, Schema, common.FileID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, tableName, schema, srcVertexTableFileID, dstVertexTableFileID, cToken, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_CreateEdgeTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEdgeTable'
type MockEngine_CreateEdgeTable_Call struct {
	*mock.Call
}

// CreateEdgeTable is a helper method to define mock.On call
//   - txnID common.TxnID
//   - tableName string
//   - schema Schema
//   - srcVertexTableFileID common.FileID
//   - dstVertexTableFileID common.FileID
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) CreateEdgeTable(txnID interface{}, tableName interface{}, schema interface{}, srcVertexTableFileID interface{}, dstVertexTableFileID interface{}, cToken interface{}, logger interface{}) *MockEngine_CreateEdgeTable_Call {
	return &MockEngine_CreateEdgeTable_Call{Call: _e.mock.On("CreateEdgeTable", txnID, tableName, schema, srcVertexTableFileID, dstVertexTableFileID, cToken, logger)}
}

func (_c *MockEngine_CreateEdgeTable_Call) Run(run func(txnID common.TxnID, tableName string, schema Schema, srcVertexTableFileID common.FileID, dstVertexTableFileID common.FileID, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_CreateEdgeTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(string), args[2].(Schema), args[3].(common.FileID), args[4].(common.FileID), args[5].(*txns.CatalogLockToken), args[6].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_CreateEdgeTable_Call) Return(_a0 error) *MockEngine_CreateEdgeTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_CreateEdgeTable_Call) RunAndReturn(run func(common.TxnID, string, Schema, common.FileID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error) *MockEngine_CreateEdgeTable_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEdgeTableIndex provides a mock function with given fields: txnID, indexName, tableName, columns, cToken, logger
func (_m *MockEngine) CreateEdgeTableIndex(txnID common.TxnID, indexName string, tableName string, columns []string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, indexName, tableName, columns, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for CreateEdgeTableIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, string, string, []string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, indexName, tableName, columns, cToken, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_CreateEdgeTableIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEdgeTableIndex'
type MockEngine_CreateEdgeTableIndex_Call struct {
	*mock.Call
}

// CreateEdgeTableIndex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - indexName string
//   - tableName string
//   - columns []string
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) CreateEdgeTableIndex(txnID interface{}, indexName interface{}, tableName interface{}, columns interface{}, cToken interface{}, logger interface{}) *MockEngine_CreateEdgeTableIndex_Call {
	return &MockEngine_CreateEdgeTableIndex_Call{Call: _e.mock.On("CreateEdgeTableIndex", txnID, indexName, tableName, columns, cToken, logger)}
}

func (_c *MockEngine_CreateEdgeTableIndex_Call) Run(run func(txnID common.TxnID, indexName string, tableName string, columns []string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_CreateEdgeTableIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(string), args[2].(string), args[3].([]string), args[4].(*txns.CatalogLockToken), args[5].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_CreateEdgeTableIndex_Call) Return(_a0 error) *MockEngine_CreateEdgeTableIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_CreateEdgeTableIndex_Call) RunAndReturn(run func(common.TxnID, string, string, []string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error) *MockEngine_CreateEdgeTableIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVertexTable provides a mock function with given fields: txnID, tableName, schema, cToken, logger
func (_m *MockEngine) CreateVertexTable(txnID common.TxnID, tableName string, schema Schema, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, tableName, schema, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for CreateVertexTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, string, Schema, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, tableName, schema, cToken, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_CreateVertexTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVertexTable'
type MockEngine_CreateVertexTable_Call struct {
	*mock.Call
}

// CreateVertexTable is a helper method to define mock.On call
//   - txnID common.TxnID
//   - tableName string
//   - schema Schema
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) CreateVertexTable(txnID interface{}, tableName interface{}, schema interface{}, cToken interface{}, logger interface{}) *MockEngine_CreateVertexTable_Call {
	return &MockEngine_CreateVertexTable_Call{Call: _e.mock.On("CreateVertexTable", txnID, tableName, schema, cToken, logger)}
}

func (_c *MockEngine_CreateVertexTable_Call) Run(run func(txnID common.TxnID, tableName string, schema Schema, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_CreateVertexTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(string), args[2].(Schema), args[3].(*txns.CatalogLockToken), args[4].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_CreateVertexTable_Call) Return(_a0 error) *MockEngine_CreateVertexTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_CreateVertexTable_Call) RunAndReturn(run func(common.TxnID, string, Schema, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error) *MockEngine_CreateVertexTable_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVertexTableIndex provides a mock function with given fields: txnID, indexName, tableName, columns, cToken, logger
func (_m *MockEngine) CreateVertexTableIndex(txnID common.TxnID, indexName string, tableName string, columns []string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, indexName, tableName, columns, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for CreateVertexTableIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, string, string, []string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, indexName, tableName, columns, cToken, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_CreateVertexTableIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVertexTableIndex'
type MockEngine_CreateVertexTableIndex_Call struct {
	*mock.Call
}

// CreateVertexTableIndex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - indexName string
//   - tableName string
//   - columns []string
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) CreateVertexTableIndex(txnID interface{}, indexName interface{}, tableName interface{}, columns interface{}, cToken interface{}, logger interface{}) *MockEngine_CreateVertexTableIndex_Call {
	return &MockEngine_CreateVertexTableIndex_Call{Call: _e.mock.On("CreateVertexTableIndex", txnID, indexName, tableName, columns, cToken, logger)}
}

func (_c *MockEngine_CreateVertexTableIndex_Call) Run(run func(txnID common.TxnID, indexName string, tableName string, columns []string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_CreateVertexTableIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(string), args[2].(string), args[3].([]string), args[4].(*txns.CatalogLockToken), args[5].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_CreateVertexTableIndex_Call) Return(_a0 error) *MockEngine_CreateVertexTableIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_CreateVertexTableIndex_Call) RunAndReturn(run func(common.TxnID, string, string, []string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error) *MockEngine_CreateVertexTableIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEdge provides a mock function with given fields: txnID, edgeID, edgesFileToken, edgeSystemIndex, dirFileToken, dirSystemIndex, ctxLogger
func (_m *MockEngine) DeleteEdge(txnID common.TxnID, edgeID EdgeSystemID, edgesFileToken *txns.FileLockToken, edgeSystemIndex Index, dirFileToken *txns.FileLockToken, dirSystemIndex Index, ctxLogger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, edgeID, edgesFileToken, edgeSystemIndex, dirFileToken, dirSystemIndex, ctxLogger)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEdge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, EdgeSystemID, *txns.FileLockToken, Index, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, edgeID, edgesFileToken, edgeSystemIndex, dirFileToken, dirSystemIndex, ctxLogger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_DeleteEdge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEdge'
type MockEngine_DeleteEdge_Call struct {
	*mock.Call
}

// DeleteEdge is a helper method to define mock.On call
//   - txnID common.TxnID
//   - edgeID EdgeSystemID
//   - edgesFileToken *txns.FileLockToken
//   - edgeSystemIndex Index
//   - dirFileToken *txns.FileLockToken
//   - dirSystemIndex Index
//   - ctxLogger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) DeleteEdge(txnID interface{}, edgeID interface{}, edgesFileToken interface{}, edgeSystemIndex interface{}, dirFileToken interface{}, dirSystemIndex interface{}, ctxLogger interface{}) *MockEngine_DeleteEdge_Call {
	return &MockEngine_DeleteEdge_Call{Call: _e.mock.On("DeleteEdge", txnID, edgeID, edgesFileToken, edgeSystemIndex, dirFileToken, dirSystemIndex, ctxLogger)}
}

func (_c *MockEngine_DeleteEdge_Call) Run(run func(txnID common.TxnID, edgeID EdgeSystemID, edgesFileToken *txns.FileLockToken, edgeSystemIndex Index, dirFileToken *txns.FileLockToken, dirSystemIndex Index, ctxLogger common.ITxnLoggerWithContext)) *MockEngine_DeleteEdge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(EdgeSystemID), args[2].(*txns.FileLockToken), args[3].(Index), args[4].(*txns.FileLockToken), args[5].(Index), args[6].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_DeleteEdge_Call) Return(_a0 error) *MockEngine_DeleteEdge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_DeleteEdge_Call) RunAndReturn(run func(common.TxnID, EdgeSystemID, *txns.FileLockToken, Index, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) error) *MockEngine_DeleteEdge_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVertex provides a mock function with given fields: txnID, vertexID, vertexFileToken, vertexIndex, ctxLogger
func (_m *MockEngine) DeleteVertex(txnID common.TxnID, vertexID VertexSystemID, vertexFileToken *txns.FileLockToken, vertexIndex Index, ctxLogger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, vertexID, vertexFileToken, vertexIndex, ctxLogger)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVertex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, vertexID, vertexFileToken, vertexIndex, ctxLogger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_DeleteVertex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVertex'
type MockEngine_DeleteVertex_Call struct {
	*mock.Call
}

// DeleteVertex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - vertexID VertexSystemID
//   - vertexFileToken *txns.FileLockToken
//   - vertexIndex Index
//   - ctxLogger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) DeleteVertex(txnID interface{}, vertexID interface{}, vertexFileToken interface{}, vertexIndex interface{}, ctxLogger interface{}) *MockEngine_DeleteVertex_Call {
	return &MockEngine_DeleteVertex_Call{Call: _e.mock.On("DeleteVertex", txnID, vertexID, vertexFileToken, vertexIndex, ctxLogger)}
}

func (_c *MockEngine_DeleteVertex_Call) Run(run func(txnID common.TxnID, vertexID VertexSystemID, vertexFileToken *txns.FileLockToken, vertexIndex Index, ctxLogger common.ITxnLoggerWithContext)) *MockEngine_DeleteVertex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(VertexSystemID), args[2].(*txns.FileLockToken), args[3].(Index), args[4].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_DeleteVertex_Call) Return(_a0 error) *MockEngine_DeleteVertex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_DeleteVertex_Call) RunAndReturn(run func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) error) *MockEngine_DeleteVertex_Call {
	_c.Call.Return(run)
	return _c
}

// DropEdgeTable provides a mock function with given fields: txnID, name, cToken, logger
func (_m *MockEngine) DropEdgeTable(txnID common.TxnID, name string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, name, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for DropEdgeTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, name, cToken, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_DropEdgeTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropEdgeTable'
type MockEngine_DropEdgeTable_Call struct {
	*mock.Call
}

// DropEdgeTable is a helper method to define mock.On call
//   - txnID common.TxnID
//   - name string
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) DropEdgeTable(txnID interface{}, name interface{}, cToken interface{}, logger interface{}) *MockEngine_DropEdgeTable_Call {
	return &MockEngine_DropEdgeTable_Call{Call: _e.mock.On("DropEdgeTable", txnID, name, cToken, logger)}
}

func (_c *MockEngine_DropEdgeTable_Call) Run(run func(txnID common.TxnID, name string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_DropEdgeTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(string), args[2].(*txns.CatalogLockToken), args[3].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_DropEdgeTable_Call) Return(_a0 error) *MockEngine_DropEdgeTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_DropEdgeTable_Call) RunAndReturn(run func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error) *MockEngine_DropEdgeTable_Call {
	_c.Call.Return(run)
	return _c
}

// DropEdgeTableIndex provides a mock function with given fields: txnID, indexName, cToken, logger
func (_m *MockEngine) DropEdgeTableIndex(txnID common.TxnID, indexName string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, indexName, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for DropEdgeTableIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, indexName, cToken, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_DropEdgeTableIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropEdgeTableIndex'
type MockEngine_DropEdgeTableIndex_Call struct {
	*mock.Call
}

// DropEdgeTableIndex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - indexName string
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) DropEdgeTableIndex(txnID interface{}, indexName interface{}, cToken interface{}, logger interface{}) *MockEngine_DropEdgeTableIndex_Call {
	return &MockEngine_DropEdgeTableIndex_Call{Call: _e.mock.On("DropEdgeTableIndex", txnID, indexName, cToken, logger)}
}

func (_c *MockEngine_DropEdgeTableIndex_Call) Run(run func(txnID common.TxnID, indexName string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_DropEdgeTableIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(string), args[2].(*txns.CatalogLockToken), args[3].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_DropEdgeTableIndex_Call) Return(_a0 error) *MockEngine_DropEdgeTableIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_DropEdgeTableIndex_Call) RunAndReturn(run func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error) *MockEngine_DropEdgeTableIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DropVertexTable provides a mock function with given fields: txnID, vertTableName, cToken, logger
func (_m *MockEngine) DropVertexTable(txnID common.TxnID, vertTableName string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, vertTableName, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for DropVertexTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, vertTableName, cToken, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_DropVertexTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropVertexTable'
type MockEngine_DropVertexTable_Call struct {
	*mock.Call
}

// DropVertexTable is a helper method to define mock.On call
//   - txnID common.TxnID
//   - vertTableName string
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) DropVertexTable(txnID interface{}, vertTableName interface{}, cToken interface{}, logger interface{}) *MockEngine_DropVertexTable_Call {
	return &MockEngine_DropVertexTable_Call{Call: _e.mock.On("DropVertexTable", txnID, vertTableName, cToken, logger)}
}

func (_c *MockEngine_DropVertexTable_Call) Run(run func(txnID common.TxnID, vertTableName string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_DropVertexTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(string), args[2].(*txns.CatalogLockToken), args[3].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_DropVertexTable_Call) Return(_a0 error) *MockEngine_DropVertexTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_DropVertexTable_Call) RunAndReturn(run func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error) *MockEngine_DropVertexTable_Call {
	_c.Call.Return(run)
	return _c
}

// DropVertexTableIndex provides a mock function with given fields: txnID, indexName, cToken, logger
func (_m *MockEngine) DropVertexTableIndex(txnID common.TxnID, indexName string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, indexName, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for DropVertexTableIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, indexName, cToken, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_DropVertexTableIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropVertexTableIndex'
type MockEngine_DropVertexTableIndex_Call struct {
	*mock.Call
}

// DropVertexTableIndex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - indexName string
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) DropVertexTableIndex(txnID interface{}, indexName interface{}, cToken interface{}, logger interface{}) *MockEngine_DropVertexTableIndex_Call {
	return &MockEngine_DropVertexTableIndex_Call{Call: _e.mock.On("DropVertexTableIndex", txnID, indexName, cToken, logger)}
}

func (_c *MockEngine_DropVertexTableIndex_Call) Run(run func(txnID common.TxnID, indexName string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_DropVertexTableIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(string), args[2].(*txns.CatalogLockToken), args[3].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_DropVertexTableIndex_Call) Return(_a0 error) *MockEngine_DropVertexTableIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_DropVertexTableIndex_Call) RunAndReturn(run func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error) *MockEngine_DropVertexTableIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllVertices provides a mock function with given fields: txnID, vertTableToken
func (_m *MockEngine) GetAllVertices(txnID common.TxnID, vertTableToken *txns.FileLockToken) (VerticesIter, error) {
	ret := _m.Called(txnID, vertTableToken)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVertices")
	}

	var r0 VerticesIter
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, *txns.FileLockToken) (VerticesIter, error)); ok {
		return rf(txnID, vertTableToken)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, *txns.FileLockToken) VerticesIter); ok {
		r0 = rf(txnID, vertTableToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(VerticesIter)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, *txns.FileLockToken) error); ok {
		r1 = rf(txnID, vertTableToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetAllVertices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVertices'
type MockEngine_GetAllVertices_Call struct {
	*mock.Call
}

// GetAllVertices is a helper method to define mock.On call
//   - txnID common.TxnID
//   - vertTableToken *txns.FileLockToken
func (_e *MockEngine_Expecter) GetAllVertices(txnID interface{}, vertTableToken interface{}) *MockEngine_GetAllVertices_Call {
	return &MockEngine_GetAllVertices_Call{Call: _e.mock.On("GetAllVertices", txnID, vertTableToken)}
}

func (_c *MockEngine_GetAllVertices_Call) Run(run func(txnID common.TxnID, vertTableToken *txns.FileLockToken)) *MockEngine_GetAllVertices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(*txns.FileLockToken))
	})
	return _c
}

func (_c *MockEngine_GetAllVertices_Call) Return(_a0 VerticesIter, _a1 error) *MockEngine_GetAllVertices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetAllVertices_Call) RunAndReturn(run func(common.TxnID, *txns.FileLockToken) (VerticesIter, error)) *MockEngine_GetAllVertices_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirTableMeta provides a mock function with given fields: cToken, vertexTableFileID
func (_m *MockEngine) GetDirTableMeta(cToken *txns.CatalogLockToken, vertexTableFileID common.FileID) (DirTableMeta, error) {
	ret := _m.Called(cToken, vertexTableFileID)

	if len(ret) == 0 {
		panic("no return value specified for GetDirTableMeta")
	}

	var r0 DirTableMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(*txns.CatalogLockToken, common.FileID) (DirTableMeta, error)); ok {
		return rf(cToken, vertexTableFileID)
	}
	if rf, ok := ret.Get(0).(func(*txns.CatalogLockToken, common.FileID) DirTableMeta); ok {
		r0 = rf(cToken, vertexTableFileID)
	} else {
		r0 = ret.Get(0).(DirTableMeta)
	}

	if rf, ok := ret.Get(1).(func(*txns.CatalogLockToken, common.FileID) error); ok {
		r1 = rf(cToken, vertexTableFileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetDirTableMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirTableMeta'
type MockEngine_GetDirTableMeta_Call struct {
	*mock.Call
}

// GetDirTableMeta is a helper method to define mock.On call
//   - cToken *txns.CatalogLockToken
//   - vertexTableFileID common.FileID
func (_e *MockEngine_Expecter) GetDirTableMeta(cToken interface{}, vertexTableFileID interface{}) *MockEngine_GetDirTableMeta_Call {
	return &MockEngine_GetDirTableMeta_Call{Call: _e.mock.On("GetDirTableMeta", cToken, vertexTableFileID)}
}

func (_c *MockEngine_GetDirTableMeta_Call) Run(run func(cToken *txns.CatalogLockToken, vertexTableFileID common.FileID)) *MockEngine_GetDirTableMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*txns.CatalogLockToken), args[1].(common.FileID))
	})
	return _c
}

func (_c *MockEngine_GetDirTableMeta_Call) Return(_a0 DirTableMeta, _a1 error) *MockEngine_GetDirTableMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetDirTableMeta_Call) RunAndReturn(run func(*txns.CatalogLockToken, common.FileID) (DirTableMeta, error)) *MockEngine_GetDirTableMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirTableSystemIndex provides a mock function with given fields: txnID, dirTableFileID, cToken, logger
func (_m *MockEngine) GetDirTableSystemIndex(txnID common.TxnID, dirTableFileID common.FileID, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) (Index, error) {
	ret := _m.Called(txnID, dirTableFileID, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for GetDirTableSystemIndex")
	}

	var r0 Index
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) (Index, error)); ok {
		return rf(txnID, dirTableFileID, cToken, logger)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) Index); ok {
		r0 = rf(txnID, dirTableFileID, cToken, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Index)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r1 = rf(txnID, dirTableFileID, cToken, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetDirTableSystemIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirTableSystemIndex'
type MockEngine_GetDirTableSystemIndex_Call struct {
	*mock.Call
}

// GetDirTableSystemIndex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - dirTableFileID common.FileID
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) GetDirTableSystemIndex(txnID interface{}, dirTableFileID interface{}, cToken interface{}, logger interface{}) *MockEngine_GetDirTableSystemIndex_Call {
	return &MockEngine_GetDirTableSystemIndex_Call{Call: _e.mock.On("GetDirTableSystemIndex", txnID, dirTableFileID, cToken, logger)}
}

func (_c *MockEngine_GetDirTableSystemIndex_Call) Run(run func(txnID common.TxnID, dirTableFileID common.FileID, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_GetDirTableSystemIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(common.FileID), args[2].(*txns.CatalogLockToken), args[3].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_GetDirTableSystemIndex_Call) Return(_a0 Index, _a1 error) *MockEngine_GetDirTableSystemIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetDirTableSystemIndex_Call) RunAndReturn(run func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) (Index, error)) *MockEngine_GetDirTableSystemIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirTableSystemIndexMeta provides a mock function with given fields: dirTableFileID, cToken
func (_m *MockEngine) GetDirTableSystemIndexMeta(dirTableFileID common.FileID, cToken *txns.CatalogLockToken) (IndexMeta, error) {
	ret := _m.Called(dirTableFileID, cToken)

	if len(ret) == 0 {
		panic("no return value specified for GetDirTableSystemIndexMeta")
	}

	var r0 IndexMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(common.FileID, *txns.CatalogLockToken) (IndexMeta, error)); ok {
		return rf(dirTableFileID, cToken)
	}
	if rf, ok := ret.Get(0).(func(common.FileID, *txns.CatalogLockToken) IndexMeta); ok {
		r0 = rf(dirTableFileID, cToken)
	} else {
		r0 = ret.Get(0).(IndexMeta)
	}

	if rf, ok := ret.Get(1).(func(common.FileID, *txns.CatalogLockToken) error); ok {
		r1 = rf(dirTableFileID, cToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetDirTableSystemIndexMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirTableSystemIndexMeta'
type MockEngine_GetDirTableSystemIndexMeta_Call struct {
	*mock.Call
}

// GetDirTableSystemIndexMeta is a helper method to define mock.On call
//   - dirTableFileID common.FileID
//   - cToken *txns.CatalogLockToken
func (_e *MockEngine_Expecter) GetDirTableSystemIndexMeta(dirTableFileID interface{}, cToken interface{}) *MockEngine_GetDirTableSystemIndexMeta_Call {
	return &MockEngine_GetDirTableSystemIndexMeta_Call{Call: _e.mock.On("GetDirTableSystemIndexMeta", dirTableFileID, cToken)}
}

func (_c *MockEngine_GetDirTableSystemIndexMeta_Call) Run(run func(dirTableFileID common.FileID, cToken *txns.CatalogLockToken)) *MockEngine_GetDirTableSystemIndexMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.FileID), args[1].(*txns.CatalogLockToken))
	})
	return _c
}

func (_c *MockEngine_GetDirTableSystemIndexMeta_Call) Return(_a0 IndexMeta, _a1 error) *MockEngine_GetDirTableSystemIndexMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetDirTableSystemIndexMeta_Call) RunAndReturn(run func(common.FileID, *txns.CatalogLockToken) (IndexMeta, error)) *MockEngine_GetDirTableSystemIndexMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeIndexMeta provides a mock function with given fields: name, cToken
func (_m *MockEngine) GetEdgeIndexMeta(name string, cToken *txns.CatalogLockToken) (IndexMeta, error) {
	ret := _m.Called(name, cToken)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeIndexMeta")
	}

	var r0 IndexMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *txns.CatalogLockToken) (IndexMeta, error)); ok {
		return rf(name, cToken)
	}
	if rf, ok := ret.Get(0).(func(string, *txns.CatalogLockToken) IndexMeta); ok {
		r0 = rf(name, cToken)
	} else {
		r0 = ret.Get(0).(IndexMeta)
	}

	if rf, ok := ret.Get(1).(func(string, *txns.CatalogLockToken) error); ok {
		r1 = rf(name, cToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetEdgeIndexMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeIndexMeta'
type MockEngine_GetEdgeIndexMeta_Call struct {
	*mock.Call
}

// GetEdgeIndexMeta is a helper method to define mock.On call
//   - name string
//   - cToken *txns.CatalogLockToken
func (_e *MockEngine_Expecter) GetEdgeIndexMeta(name interface{}, cToken interface{}) *MockEngine_GetEdgeIndexMeta_Call {
	return &MockEngine_GetEdgeIndexMeta_Call{Call: _e.mock.On("GetEdgeIndexMeta", name, cToken)}
}

func (_c *MockEngine_GetEdgeIndexMeta_Call) Run(run func(name string, cToken *txns.CatalogLockToken)) *MockEngine_GetEdgeIndexMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*txns.CatalogLockToken))
	})
	return _c
}

func (_c *MockEngine_GetEdgeIndexMeta_Call) Return(_a0 IndexMeta, _a1 error) *MockEngine_GetEdgeIndexMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetEdgeIndexMeta_Call) RunAndReturn(run func(string, *txns.CatalogLockToken) (IndexMeta, error)) *MockEngine_GetEdgeIndexMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeTableIndex provides a mock function with given fields: txnID, indexName, cToken, logger
func (_m *MockEngine) GetEdgeTableIndex(txnID common.TxnID, indexName string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) (Index, error) {
	ret := _m.Called(txnID, indexName, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeTableIndex")
	}

	var r0 Index
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) (Index, error)); ok {
		return rf(txnID, indexName, cToken, logger)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) Index); ok {
		r0 = rf(txnID, indexName, cToken, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Index)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r1 = rf(txnID, indexName, cToken, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetEdgeTableIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeTableIndex'
type MockEngine_GetEdgeTableIndex_Call struct {
	*mock.Call
}

// GetEdgeTableIndex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - indexName string
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) GetEdgeTableIndex(txnID interface{}, indexName interface{}, cToken interface{}, logger interface{}) *MockEngine_GetEdgeTableIndex_Call {
	return &MockEngine_GetEdgeTableIndex_Call{Call: _e.mock.On("GetEdgeTableIndex", txnID, indexName, cToken, logger)}
}

func (_c *MockEngine_GetEdgeTableIndex_Call) Run(run func(txnID common.TxnID, indexName string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_GetEdgeTableIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(string), args[2].(*txns.CatalogLockToken), args[3].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_GetEdgeTableIndex_Call) Return(_a0 Index, _a1 error) *MockEngine_GetEdgeTableIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetEdgeTableIndex_Call) RunAndReturn(run func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) (Index, error)) *MockEngine_GetEdgeTableIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeTableMeta provides a mock function with given fields: name, cToken
func (_m *MockEngine) GetEdgeTableMeta(name string, cToken *txns.CatalogLockToken) (EdgeTableMeta, error) {
	ret := _m.Called(name, cToken)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeTableMeta")
	}

	var r0 EdgeTableMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *txns.CatalogLockToken) (EdgeTableMeta, error)); ok {
		return rf(name, cToken)
	}
	if rf, ok := ret.Get(0).(func(string, *txns.CatalogLockToken) EdgeTableMeta); ok {
		r0 = rf(name, cToken)
	} else {
		r0 = ret.Get(0).(EdgeTableMeta)
	}

	if rf, ok := ret.Get(1).(func(string, *txns.CatalogLockToken) error); ok {
		r1 = rf(name, cToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetEdgeTableMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeTableMeta'
type MockEngine_GetEdgeTableMeta_Call struct {
	*mock.Call
}

// GetEdgeTableMeta is a helper method to define mock.On call
//   - name string
//   - cToken *txns.CatalogLockToken
func (_e *MockEngine_Expecter) GetEdgeTableMeta(name interface{}, cToken interface{}) *MockEngine_GetEdgeTableMeta_Call {
	return &MockEngine_GetEdgeTableMeta_Call{Call: _e.mock.On("GetEdgeTableMeta", name, cToken)}
}

func (_c *MockEngine_GetEdgeTableMeta_Call) Run(run func(name string, cToken *txns.CatalogLockToken)) *MockEngine_GetEdgeTableMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*txns.CatalogLockToken))
	})
	return _c
}

func (_c *MockEngine_GetEdgeTableMeta_Call) Return(_a0 EdgeTableMeta, _a1 error) *MockEngine_GetEdgeTableMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetEdgeTableMeta_Call) RunAndReturn(run func(string, *txns.CatalogLockToken) (EdgeTableMeta, error)) *MockEngine_GetEdgeTableMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeTableMetaByFileID provides a mock function with given fields: edgeTableID, cToken
func (_m *MockEngine) GetEdgeTableMetaByFileID(edgeTableID common.FileID, cToken *txns.CatalogLockToken) (EdgeTableMeta, error) {
	ret := _m.Called(edgeTableID, cToken)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeTableMetaByFileID")
	}

	var r0 EdgeTableMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(common.FileID, *txns.CatalogLockToken) (EdgeTableMeta, error)); ok {
		return rf(edgeTableID, cToken)
	}
	if rf, ok := ret.Get(0).(func(common.FileID, *txns.CatalogLockToken) EdgeTableMeta); ok {
		r0 = rf(edgeTableID, cToken)
	} else {
		r0 = ret.Get(0).(EdgeTableMeta)
	}

	if rf, ok := ret.Get(1).(func(common.FileID, *txns.CatalogLockToken) error); ok {
		r1 = rf(edgeTableID, cToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetEdgeTableMetaByFileID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeTableMetaByFileID'
type MockEngine_GetEdgeTableMetaByFileID_Call struct {
	*mock.Call
}

// GetEdgeTableMetaByFileID is a helper method to define mock.On call
//   - edgeTableID common.FileID
//   - cToken *txns.CatalogLockToken
func (_e *MockEngine_Expecter) GetEdgeTableMetaByFileID(edgeTableID interface{}, cToken interface{}) *MockEngine_GetEdgeTableMetaByFileID_Call {
	return &MockEngine_GetEdgeTableMetaByFileID_Call{Call: _e.mock.On("GetEdgeTableMetaByFileID", edgeTableID, cToken)}
}

func (_c *MockEngine_GetEdgeTableMetaByFileID_Call) Run(run func(edgeTableID common.FileID, cToken *txns.CatalogLockToken)) *MockEngine_GetEdgeTableMetaByFileID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.FileID), args[1].(*txns.CatalogLockToken))
	})
	return _c
}

func (_c *MockEngine_GetEdgeTableMetaByFileID_Call) Return(_a0 EdgeTableMeta, _a1 error) *MockEngine_GetEdgeTableMetaByFileID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetEdgeTableMetaByFileID_Call) RunAndReturn(run func(common.FileID, *txns.CatalogLockToken) (EdgeTableMeta, error)) *MockEngine_GetEdgeTableMetaByFileID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeTableSystemIndex provides a mock function with given fields: txnID, edgeTableFileID, cToken, logger
func (_m *MockEngine) GetEdgeTableSystemIndex(txnID common.TxnID, edgeTableFileID common.FileID, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) (Index, error) {
	ret := _m.Called(txnID, edgeTableFileID, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeTableSystemIndex")
	}

	var r0 Index
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) (Index, error)); ok {
		return rf(txnID, edgeTableFileID, cToken, logger)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) Index); ok {
		r0 = rf(txnID, edgeTableFileID, cToken, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Index)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r1 = rf(txnID, edgeTableFileID, cToken, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetEdgeTableSystemIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeTableSystemIndex'
type MockEngine_GetEdgeTableSystemIndex_Call struct {
	*mock.Call
}

// GetEdgeTableSystemIndex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - edgeTableFileID common.FileID
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) GetEdgeTableSystemIndex(txnID interface{}, edgeTableFileID interface{}, cToken interface{}, logger interface{}) *MockEngine_GetEdgeTableSystemIndex_Call {
	return &MockEngine_GetEdgeTableSystemIndex_Call{Call: _e.mock.On("GetEdgeTableSystemIndex", txnID, edgeTableFileID, cToken, logger)}
}

func (_c *MockEngine_GetEdgeTableSystemIndex_Call) Run(run func(txnID common.TxnID, edgeTableFileID common.FileID, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_GetEdgeTableSystemIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(common.FileID), args[2].(*txns.CatalogLockToken), args[3].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_GetEdgeTableSystemIndex_Call) Return(_a0 Index, _a1 error) *MockEngine_GetEdgeTableSystemIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetEdgeTableSystemIndex_Call) RunAndReturn(run func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) (Index, error)) *MockEngine_GetEdgeTableSystemIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeTableSystemIndexMeta provides a mock function with given fields: edgeTableFileID, cToken
func (_m *MockEngine) GetEdgeTableSystemIndexMeta(edgeTableFileID common.FileID, cToken *txns.CatalogLockToken) (IndexMeta, error) {
	ret := _m.Called(edgeTableFileID, cToken)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeTableSystemIndexMeta")
	}

	var r0 IndexMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(common.FileID, *txns.CatalogLockToken) (IndexMeta, error)); ok {
		return rf(edgeTableFileID, cToken)
	}
	if rf, ok := ret.Get(0).(func(common.FileID, *txns.CatalogLockToken) IndexMeta); ok {
		r0 = rf(edgeTableFileID, cToken)
	} else {
		r0 = ret.Get(0).(IndexMeta)
	}

	if rf, ok := ret.Get(1).(func(common.FileID, *txns.CatalogLockToken) error); ok {
		r1 = rf(edgeTableFileID, cToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetEdgeTableSystemIndexMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeTableSystemIndexMeta'
type MockEngine_GetEdgeTableSystemIndexMeta_Call struct {
	*mock.Call
}

// GetEdgeTableSystemIndexMeta is a helper method to define mock.On call
//   - edgeTableFileID common.FileID
//   - cToken *txns.CatalogLockToken
func (_e *MockEngine_Expecter) GetEdgeTableSystemIndexMeta(edgeTableFileID interface{}, cToken interface{}) *MockEngine_GetEdgeTableSystemIndexMeta_Call {
	return &MockEngine_GetEdgeTableSystemIndexMeta_Call{Call: _e.mock.On("GetEdgeTableSystemIndexMeta", edgeTableFileID, cToken)}
}

func (_c *MockEngine_GetEdgeTableSystemIndexMeta_Call) Run(run func(edgeTableFileID common.FileID, cToken *txns.CatalogLockToken)) *MockEngine_GetEdgeTableSystemIndexMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.FileID), args[1].(*txns.CatalogLockToken))
	})
	return _c
}

func (_c *MockEngine_GetEdgeTableSystemIndexMeta_Call) Return(_a0 IndexMeta, _a1 error) *MockEngine_GetEdgeTableSystemIndexMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetEdgeTableSystemIndexMeta_Call) RunAndReturn(run func(common.FileID, *txns.CatalogLockToken) (IndexMeta, error)) *MockEngine_GetEdgeTableSystemIndexMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetNeighborsWithEdgeFilter provides a mock function with given fields: txnID, v, vertTableToken, vertIndex, edgeFilter, logger
func (_m *MockEngine) GetNeighborsWithEdgeFilter(txnID common.TxnID, v VertexSystemID, vertTableToken *txns.FileLockToken, vertIndex Index, edgeFilter EdgeFilter, logger common.ITxnLoggerWithContext) (VerticesIter, error) {
	ret := _m.Called(txnID, v, vertTableToken, vertIndex, edgeFilter, logger)

	if len(ret) == 0 {
		panic("no return value specified for GetNeighborsWithEdgeFilter")
	}

	var r0 VerticesIter
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, EdgeFilter, common.ITxnLoggerWithContext) (VerticesIter, error)); ok {
		return rf(txnID, v, vertTableToken, vertIndex, edgeFilter, logger)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, EdgeFilter, common.ITxnLoggerWithContext) VerticesIter); ok {
		r0 = rf(txnID, v, vertTableToken, vertIndex, edgeFilter, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(VerticesIter)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, EdgeFilter, common.ITxnLoggerWithContext) error); ok {
		r1 = rf(txnID, v, vertTableToken, vertIndex, edgeFilter, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetNeighborsWithEdgeFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNeighborsWithEdgeFilter'
type MockEngine_GetNeighborsWithEdgeFilter_Call struct {
	*mock.Call
}

// GetNeighborsWithEdgeFilter is a helper method to define mock.On call
//   - txnID common.TxnID
//   - v VertexSystemID
//   - vertTableToken *txns.FileLockToken
//   - vertIndex Index
//   - edgeFilter EdgeFilter
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) GetNeighborsWithEdgeFilter(txnID interface{}, v interface{}, vertTableToken interface{}, vertIndex interface{}, edgeFilter interface{}, logger interface{}) *MockEngine_GetNeighborsWithEdgeFilter_Call {
	return &MockEngine_GetNeighborsWithEdgeFilter_Call{Call: _e.mock.On("GetNeighborsWithEdgeFilter", txnID, v, vertTableToken, vertIndex, edgeFilter, logger)}
}

func (_c *MockEngine_GetNeighborsWithEdgeFilter_Call) Run(run func(txnID common.TxnID, v VertexSystemID, vertTableToken *txns.FileLockToken, vertIndex Index, edgeFilter EdgeFilter, logger common.ITxnLoggerWithContext)) *MockEngine_GetNeighborsWithEdgeFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(VertexSystemID), args[2].(*txns.FileLockToken), args[3].(Index), args[4].(EdgeFilter), args[5].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_GetNeighborsWithEdgeFilter_Call) Return(_a0 VerticesIter, _a1 error) *MockEngine_GetNeighborsWithEdgeFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetNeighborsWithEdgeFilter_Call) RunAndReturn(run func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, EdgeFilter, common.ITxnLoggerWithContext) (VerticesIter, error)) *MockEngine_GetNeighborsWithEdgeFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexTableIndex provides a mock function with given fields: txnID, indexName, cToken, logger
func (_m *MockEngine) GetVertexTableIndex(txnID common.TxnID, indexName string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) (Index, error) {
	ret := _m.Called(txnID, indexName, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexTableIndex")
	}

	var r0 Index
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) (Index, error)); ok {
		return rf(txnID, indexName, cToken, logger)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) Index); ok {
		r0 = rf(txnID, indexName, cToken, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Index)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r1 = rf(txnID, indexName, cToken, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetVertexTableIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexTableIndex'
type MockEngine_GetVertexTableIndex_Call struct {
	*mock.Call
}

// GetVertexTableIndex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - indexName string
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) GetVertexTableIndex(txnID interface{}, indexName interface{}, cToken interface{}, logger interface{}) *MockEngine_GetVertexTableIndex_Call {
	return &MockEngine_GetVertexTableIndex_Call{Call: _e.mock.On("GetVertexTableIndex", txnID, indexName, cToken, logger)}
}

func (_c *MockEngine_GetVertexTableIndex_Call) Run(run func(txnID common.TxnID, indexName string, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_GetVertexTableIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(string), args[2].(*txns.CatalogLockToken), args[3].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_GetVertexTableIndex_Call) Return(_a0 Index, _a1 error) *MockEngine_GetVertexTableIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetVertexTableIndex_Call) RunAndReturn(run func(common.TxnID, string, *txns.CatalogLockToken, common.ITxnLoggerWithContext) (Index, error)) *MockEngine_GetVertexTableIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexTableIndexMeta provides a mock function with given fields: name, cToken
func (_m *MockEngine) GetVertexTableIndexMeta(name string, cToken *txns.CatalogLockToken) (IndexMeta, error) {
	ret := _m.Called(name, cToken)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexTableIndexMeta")
	}

	var r0 IndexMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *txns.CatalogLockToken) (IndexMeta, error)); ok {
		return rf(name, cToken)
	}
	if rf, ok := ret.Get(0).(func(string, *txns.CatalogLockToken) IndexMeta); ok {
		r0 = rf(name, cToken)
	} else {
		r0 = ret.Get(0).(IndexMeta)
	}

	if rf, ok := ret.Get(1).(func(string, *txns.CatalogLockToken) error); ok {
		r1 = rf(name, cToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetVertexTableIndexMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexTableIndexMeta'
type MockEngine_GetVertexTableIndexMeta_Call struct {
	*mock.Call
}

// GetVertexTableIndexMeta is a helper method to define mock.On call
//   - name string
//   - cToken *txns.CatalogLockToken
func (_e *MockEngine_Expecter) GetVertexTableIndexMeta(name interface{}, cToken interface{}) *MockEngine_GetVertexTableIndexMeta_Call {
	return &MockEngine_GetVertexTableIndexMeta_Call{Call: _e.mock.On("GetVertexTableIndexMeta", name, cToken)}
}

func (_c *MockEngine_GetVertexTableIndexMeta_Call) Run(run func(name string, cToken *txns.CatalogLockToken)) *MockEngine_GetVertexTableIndexMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*txns.CatalogLockToken))
	})
	return _c
}

func (_c *MockEngine_GetVertexTableIndexMeta_Call) Return(_a0 IndexMeta, _a1 error) *MockEngine_GetVertexTableIndexMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetVertexTableIndexMeta_Call) RunAndReturn(run func(string, *txns.CatalogLockToken) (IndexMeta, error)) *MockEngine_GetVertexTableIndexMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexTableMeta provides a mock function with given fields: name, cToken
func (_m *MockEngine) GetVertexTableMeta(name string, cToken *txns.CatalogLockToken) (VertexTableMeta, error) {
	ret := _m.Called(name, cToken)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexTableMeta")
	}

	var r0 VertexTableMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *txns.CatalogLockToken) (VertexTableMeta, error)); ok {
		return rf(name, cToken)
	}
	if rf, ok := ret.Get(0).(func(string, *txns.CatalogLockToken) VertexTableMeta); ok {
		r0 = rf(name, cToken)
	} else {
		r0 = ret.Get(0).(VertexTableMeta)
	}

	if rf, ok := ret.Get(1).(func(string, *txns.CatalogLockToken) error); ok {
		r1 = rf(name, cToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetVertexTableMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexTableMeta'
type MockEngine_GetVertexTableMeta_Call struct {
	*mock.Call
}

// GetVertexTableMeta is a helper method to define mock.On call
//   - name string
//   - cToken *txns.CatalogLockToken
func (_e *MockEngine_Expecter) GetVertexTableMeta(name interface{}, cToken interface{}) *MockEngine_GetVertexTableMeta_Call {
	return &MockEngine_GetVertexTableMeta_Call{Call: _e.mock.On("GetVertexTableMeta", name, cToken)}
}

func (_c *MockEngine_GetVertexTableMeta_Call) Run(run func(name string, cToken *txns.CatalogLockToken)) *MockEngine_GetVertexTableMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*txns.CatalogLockToken))
	})
	return _c
}

func (_c *MockEngine_GetVertexTableMeta_Call) Return(_a0 VertexTableMeta, _a1 error) *MockEngine_GetVertexTableMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetVertexTableMeta_Call) RunAndReturn(run func(string, *txns.CatalogLockToken) (VertexTableMeta, error)) *MockEngine_GetVertexTableMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexTableMetaByFileID provides a mock function with given fields: vertexTableID, cToken
func (_m *MockEngine) GetVertexTableMetaByFileID(vertexTableID common.FileID, cToken *txns.CatalogLockToken) (VertexTableMeta, error) {
	ret := _m.Called(vertexTableID, cToken)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexTableMetaByFileID")
	}

	var r0 VertexTableMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(common.FileID, *txns.CatalogLockToken) (VertexTableMeta, error)); ok {
		return rf(vertexTableID, cToken)
	}
	if rf, ok := ret.Get(0).(func(common.FileID, *txns.CatalogLockToken) VertexTableMeta); ok {
		r0 = rf(vertexTableID, cToken)
	} else {
		r0 = ret.Get(0).(VertexTableMeta)
	}

	if rf, ok := ret.Get(1).(func(common.FileID, *txns.CatalogLockToken) error); ok {
		r1 = rf(vertexTableID, cToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetVertexTableMetaByFileID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexTableMetaByFileID'
type MockEngine_GetVertexTableMetaByFileID_Call struct {
	*mock.Call
}

// GetVertexTableMetaByFileID is a helper method to define mock.On call
//   - vertexTableID common.FileID
//   - cToken *txns.CatalogLockToken
func (_e *MockEngine_Expecter) GetVertexTableMetaByFileID(vertexTableID interface{}, cToken interface{}) *MockEngine_GetVertexTableMetaByFileID_Call {
	return &MockEngine_GetVertexTableMetaByFileID_Call{Call: _e.mock.On("GetVertexTableMetaByFileID", vertexTableID, cToken)}
}

func (_c *MockEngine_GetVertexTableMetaByFileID_Call) Run(run func(vertexTableID common.FileID, cToken *txns.CatalogLockToken)) *MockEngine_GetVertexTableMetaByFileID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.FileID), args[1].(*txns.CatalogLockToken))
	})
	return _c
}

func (_c *MockEngine_GetVertexTableMetaByFileID_Call) Return(_a0 VertexTableMeta, _a1 error) *MockEngine_GetVertexTableMetaByFileID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetVertexTableMetaByFileID_Call) RunAndReturn(run func(common.FileID, *txns.CatalogLockToken) (VertexTableMeta, error)) *MockEngine_GetVertexTableMetaByFileID_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexTableSystemIndex provides a mock function with given fields: txnID, vertexTableFileID, cToken, logger
func (_m *MockEngine) GetVertexTableSystemIndex(txnID common.TxnID, vertexTableFileID common.FileID, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext) (Index, error) {
	ret := _m.Called(txnID, vertexTableFileID, cToken, logger)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexTableSystemIndex")
	}

	var r0 Index
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) (Index, error)); ok {
		return rf(txnID, vertexTableFileID, cToken, logger)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) Index); ok {
		r0 = rf(txnID, vertexTableFileID, cToken, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Index)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) error); ok {
		r1 = rf(txnID, vertexTableFileID, cToken, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetVertexTableSystemIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexTableSystemIndex'
type MockEngine_GetVertexTableSystemIndex_Call struct {
	*mock.Call
}

// GetVertexTableSystemIndex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - vertexTableFileID common.FileID
//   - cToken *txns.CatalogLockToken
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) GetVertexTableSystemIndex(txnID interface{}, vertexTableFileID interface{}, cToken interface{}, logger interface{}) *MockEngine_GetVertexTableSystemIndex_Call {
	return &MockEngine_GetVertexTableSystemIndex_Call{Call: _e.mock.On("GetVertexTableSystemIndex", txnID, vertexTableFileID, cToken, logger)}
}

func (_c *MockEngine_GetVertexTableSystemIndex_Call) Run(run func(txnID common.TxnID, vertexTableFileID common.FileID, cToken *txns.CatalogLockToken, logger common.ITxnLoggerWithContext)) *MockEngine_GetVertexTableSystemIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(common.FileID), args[2].(*txns.CatalogLockToken), args[3].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_GetVertexTableSystemIndex_Call) Return(_a0 Index, _a1 error) *MockEngine_GetVertexTableSystemIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetVertexTableSystemIndex_Call) RunAndReturn(run func(common.TxnID, common.FileID, *txns.CatalogLockToken, common.ITxnLoggerWithContext) (Index, error)) *MockEngine_GetVertexTableSystemIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexTableSystemIndexMeta provides a mock function with given fields: vertexTableFileID, cToken
func (_m *MockEngine) GetVertexTableSystemIndexMeta(vertexTableFileID common.FileID, cToken *txns.CatalogLockToken) (IndexMeta, error) {
	ret := _m.Called(vertexTableFileID, cToken)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexTableSystemIndexMeta")
	}

	var r0 IndexMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(common.FileID, *txns.CatalogLockToken) (IndexMeta, error)); ok {
		return rf(vertexTableFileID, cToken)
	}
	if rf, ok := ret.Get(0).(func(common.FileID, *txns.CatalogLockToken) IndexMeta); ok {
		r0 = rf(vertexTableFileID, cToken)
	} else {
		r0 = ret.Get(0).(IndexMeta)
	}

	if rf, ok := ret.Get(1).(func(common.FileID, *txns.CatalogLockToken) error); ok {
		r1 = rf(vertexTableFileID, cToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_GetVertexTableSystemIndexMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexTableSystemIndexMeta'
type MockEngine_GetVertexTableSystemIndexMeta_Call struct {
	*mock.Call
}

// GetVertexTableSystemIndexMeta is a helper method to define mock.On call
//   - vertexTableFileID common.FileID
//   - cToken *txns.CatalogLockToken
func (_e *MockEngine_Expecter) GetVertexTableSystemIndexMeta(vertexTableFileID interface{}, cToken interface{}) *MockEngine_GetVertexTableSystemIndexMeta_Call {
	return &MockEngine_GetVertexTableSystemIndexMeta_Call{Call: _e.mock.On("GetVertexTableSystemIndexMeta", vertexTableFileID, cToken)}
}

func (_c *MockEngine_GetVertexTableSystemIndexMeta_Call) Run(run func(vertexTableFileID common.FileID, cToken *txns.CatalogLockToken)) *MockEngine_GetVertexTableSystemIndexMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.FileID), args[1].(*txns.CatalogLockToken))
	})
	return _c
}

func (_c *MockEngine_GetVertexTableSystemIndexMeta_Call) Return(_a0 IndexMeta, _a1 error) *MockEngine_GetVertexTableSystemIndexMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_GetVertexTableSystemIndexMeta_Call) RunAndReturn(run func(common.FileID, *txns.CatalogLockToken) (IndexMeta, error)) *MockEngine_GetVertexTableSystemIndexMeta_Call {
	_c.Call.Return(run)
	return _c
}

// InsertEdge provides a mock function with given fields: txnID, srcVertexID, dstVertexID, edgeFields, schema, srcVertToken, srcVertSystemIndex, srcVertDirToken, srcVertDirSystemIndex, edgesFileToken, edgeSystemIndex, ctxLogger
func (_m *MockEngine) InsertEdge(txnID common.TxnID, srcVertexID VertexSystemID, dstVertexID VertexSystemID, edgeFields map[string]interface{}, schema Schema, srcVertToken *txns.FileLockToken, srcVertSystemIndex Index, srcVertDirToken *txns.FileLockToken, srcVertDirSystemIndex Index, edgesFileToken *txns.FileLockToken, edgeSystemIndex Index, ctxLogger common.ITxnLoggerWithContext) (EdgeSystemID, error) {
	ret := _m.Called(txnID, srcVertexID, dstVertexID, edgeFields, schema, srcVertToken, srcVertSystemIndex, srcVertDirToken, srcVertDirSystemIndex, edgesFileToken, edgeSystemIndex, ctxLogger)

	if len(ret) == 0 {
		panic("no return value specified for InsertEdge")
	}

	var r0 EdgeSystemID
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, VertexSystemID, map[string]interface{}, Schema, *txns.FileLockToken, Index, *txns.FileLockToken, Index, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) (EdgeSystemID, error)); ok {
		return rf(txnID, srcVertexID, dstVertexID, edgeFields, schema, srcVertToken, srcVertSystemIndex, srcVertDirToken, srcVertDirSystemIndex, edgesFileToken, edgeSystemIndex, ctxLogger)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, VertexSystemID, map[string]interface{}, Schema, *txns.FileLockToken, Index, *txns.FileLockToken, Index, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) EdgeSystemID); ok {
		r0 = rf(txnID, srcVertexID, dstVertexID, edgeFields, schema, srcVertToken, srcVertSystemIndex, srcVertDirToken, srcVertDirSystemIndex, edgesFileToken, edgeSystemIndex, ctxLogger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EdgeSystemID)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, VertexSystemID, VertexSystemID, map[string]interface{}, Schema, *txns.FileLockToken, Index, *txns.FileLockToken, Index, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) error); ok {
		r1 = rf(txnID, srcVertexID, dstVertexID, edgeFields, schema, srcVertToken, srcVertSystemIndex, srcVertDirToken, srcVertDirSystemIndex, edgesFileToken, edgeSystemIndex, ctxLogger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_InsertEdge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertEdge'
type MockEngine_InsertEdge_Call struct {
	*mock.Call
}

// InsertEdge is a helper method to define mock.On call
//   - txnID common.TxnID
//   - srcVertexID VertexSystemID
//   - dstVertexID VertexSystemID
//   - edgeFields map[string]interface{}
//   - schema Schema
//   - srcVertToken *txns.FileLockToken
//   - srcVertSystemIndex Index
//   - srcVertDirToken *txns.FileLockToken
//   - srcVertDirSystemIndex Index
//   - edgesFileToken *txns.FileLockToken
//   - edgeSystemIndex Index
//   - ctxLogger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) InsertEdge(txnID interface{}, srcVertexID interface{}, dstVertexID interface{}, edgeFields interface{}, schema interface{}, srcVertToken interface{}, srcVertSystemIndex interface{}, srcVertDirToken interface{}, srcVertDirSystemIndex interface{}, edgesFileToken interface{}, edgeSystemIndex interface{}, ctxLogger interface{}) *MockEngine_InsertEdge_Call {
	return &MockEngine_InsertEdge_Call{Call: _e.mock.On("InsertEdge", txnID, srcVertexID, dstVertexID, edgeFields, schema, srcVertToken, srcVertSystemIndex, srcVertDirToken, srcVertDirSystemIndex, edgesFileToken, edgeSystemIndex, ctxLogger)}
}

func (_c *MockEngine_InsertEdge_Call) Run(run func(txnID common.TxnID, srcVertexID VertexSystemID, dstVertexID VertexSystemID, edgeFields map[string]interface{}, schema Schema, srcVertToken *txns.FileLockToken, srcVertSystemIndex Index, srcVertDirToken *txns.FileLockToken, srcVertDirSystemIndex Index, edgesFileToken *txns.FileLockToken, edgeSystemIndex Index, ctxLogger common.ITxnLoggerWithContext)) *MockEngine_InsertEdge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(VertexSystemID), args[2].(VertexSystemID), args[3].(map[string]interface{}), args[4].(Schema), args[5].(*txns.FileLockToken), args[6].(Index), args[7].(*txns.FileLockToken), args[8].(Index), args[9].(*txns.FileLockToken), args[10].(Index), args[11].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_InsertEdge_Call) Return(_a0 EdgeSystemID, _a1 error) *MockEngine_InsertEdge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_InsertEdge_Call) RunAndReturn(run func(common.TxnID, VertexSystemID, VertexSystemID, map[string]interface{}, Schema, *txns.FileLockToken, Index, *txns.FileLockToken, Index, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) (EdgeSystemID, error)) *MockEngine_InsertEdge_Call {
	_c.Call.Return(run)
	return _c
}

// InsertVertex provides a mock function with given fields: txnID, data, schema, vertexFileToken, vertexIndex, ctxLogger
func (_m *MockEngine) InsertVertex(txnID common.TxnID, data map[string]interface{}, schema Schema, vertexFileToken *txns.FileLockToken, vertexIndex Index, ctxLogger common.ITxnLoggerWithContext) (VertexSystemID, error) {
	ret := _m.Called(txnID, data, schema, vertexFileToken, vertexIndex, ctxLogger)

	if len(ret) == 0 {
		panic("no return value specified for InsertVertex")
	}

	var r0 VertexSystemID
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, map[string]interface{}, Schema, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) (VertexSystemID, error)); ok {
		return rf(txnID, data, schema, vertexFileToken, vertexIndex, ctxLogger)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, map[string]interface{}, Schema, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) VertexSystemID); ok {
		r0 = rf(txnID, data, schema, vertexFileToken, vertexIndex, ctxLogger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(VertexSystemID)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, map[string]interface{}, Schema, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) error); ok {
		r1 = rf(txnID, data, schema, vertexFileToken, vertexIndex, ctxLogger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_InsertVertex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertVertex'
type MockEngine_InsertVertex_Call struct {
	*mock.Call
}

// InsertVertex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - data map[string]interface{}
//   - schema Schema
//   - vertexFileToken *txns.FileLockToken
//   - vertexIndex Index
//   - ctxLogger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) InsertVertex(txnID interface{}, data interface{}, schema interface{}, vertexFileToken interface{}, vertexIndex interface{}, ctxLogger interface{}) *MockEngine_InsertVertex_Call {
	return &MockEngine_InsertVertex_Call{Call: _e.mock.On("InsertVertex", txnID, data, schema, vertexFileToken, vertexIndex, ctxLogger)}
}

func (_c *MockEngine_InsertVertex_Call) Run(run func(txnID common.TxnID, data map[string]interface{}, schema Schema, vertexFileToken *txns.FileLockToken, vertexIndex Index, ctxLogger common.ITxnLoggerWithContext)) *MockEngine_InsertVertex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(map[string]interface{}), args[2].(Schema), args[3].(*txns.FileLockToken), args[4].(Index), args[5].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_InsertVertex_Call) Return(_a0 VertexSystemID, _a1 error) *MockEngine_InsertVertex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_InsertVertex_Call) RunAndReturn(run func(common.TxnID, map[string]interface{}, Schema, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) (VertexSystemID, error)) *MockEngine_InsertVertex_Call {
	_c.Call.Return(run)
	return _c
}

// Neighbours provides a mock function with given fields: txnID, startVertSystemID, startVertTableToken, startVertIndex, logger
func (_m *MockEngine) Neighbours(txnID common.TxnID, startVertSystemID VertexSystemID, startVertTableToken *txns.FileLockToken, startVertIndex Index, logger common.ITxnLoggerWithContext) (NeighborIDIter, error) {
	ret := _m.Called(txnID, startVertSystemID, startVertTableToken, startVertIndex, logger)

	if len(ret) == 0 {
		panic("no return value specified for Neighbours")
	}

	var r0 NeighborIDIter
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) (NeighborIDIter, error)); ok {
		return rf(txnID, startVertSystemID, startVertTableToken, startVertIndex, logger)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) NeighborIDIter); ok {
		r0 = rf(txnID, startVertSystemID, startVertTableToken, startVertIndex, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(NeighborIDIter)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) error); ok {
		r1 = rf(txnID, startVertSystemID, startVertTableToken, startVertIndex, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_Neighbours_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Neighbours'
type MockEngine_Neighbours_Call struct {
	*mock.Call
}

// Neighbours is a helper method to define mock.On call
//   - txnID common.TxnID
//   - startVertSystemID VertexSystemID
//   - startVertTableToken *txns.FileLockToken
//   - startVertIndex Index
//   - logger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) Neighbours(txnID interface{}, startVertSystemID interface{}, startVertTableToken interface{}, startVertIndex interface{}, logger interface{}) *MockEngine_Neighbours_Call {
	return &MockEngine_Neighbours_Call{Call: _e.mock.On("Neighbours", txnID, startVertSystemID, startVertTableToken, startVertIndex, logger)}
}

func (_c *MockEngine_Neighbours_Call) Run(run func(txnID common.TxnID, startVertSystemID VertexSystemID, startVertTableToken *txns.FileLockToken, startVertIndex Index, logger common.ITxnLoggerWithContext)) *MockEngine_Neighbours_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(VertexSystemID), args[2].(*txns.FileLockToken), args[3].(Index), args[4].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_Neighbours_Call) Return(_a0 NeighborIDIter, _a1 error) *MockEngine_Neighbours_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_Neighbours_Call) RunAndReturn(run func(common.TxnID, VertexSystemID, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) (NeighborIDIter, error)) *MockEngine_Neighbours_Call {
	_c.Call.Return(run)
	return _c
}

// NewAggregationAssociativeArray provides a mock function with given fields: _a0
func (_m *MockEngine) NewAggregationAssociativeArray(_a0 common.TxnID) (AssociativeArray[VertexID, float64], error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewAggregationAssociativeArray")
	}

	var r0 AssociativeArray[VertexID, float64]
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID) (AssociativeArray[VertexID, float64], error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID) AssociativeArray[VertexID, float64]); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(AssociativeArray[VertexID, float64])
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_NewAggregationAssociativeArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAggregationAssociativeArray'
type MockEngine_NewAggregationAssociativeArray_Call struct {
	*mock.Call
}

// NewAggregationAssociativeArray is a helper method to define mock.On call
//   - _a0 common.TxnID
func (_e *MockEngine_Expecter) NewAggregationAssociativeArray(_a0 interface{}) *MockEngine_NewAggregationAssociativeArray_Call {
	return &MockEngine_NewAggregationAssociativeArray_Call{Call: _e.mock.On("NewAggregationAssociativeArray", _a0)}
}

func (_c *MockEngine_NewAggregationAssociativeArray_Call) Run(run func(_a0 common.TxnID)) *MockEngine_NewAggregationAssociativeArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID))
	})
	return _c
}

func (_c *MockEngine_NewAggregationAssociativeArray_Call) Return(_a0 AssociativeArray[VertexID, float64], _a1 error) *MockEngine_NewAggregationAssociativeArray_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_NewAggregationAssociativeArray_Call) RunAndReturn(run func(common.TxnID) (AssociativeArray[VertexID, float64], error)) *MockEngine_NewAggregationAssociativeArray_Call {
	_c.Call.Return(run)
	return _c
}

// NewBitMap provides a mock function with given fields: _a0
func (_m *MockEngine) NewBitMap(_a0 common.TxnID) (BitMap, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewBitMap")
	}

	var r0 BitMap
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID) (BitMap, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID) BitMap); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BitMap)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_NewBitMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewBitMap'
type MockEngine_NewBitMap_Call struct {
	*mock.Call
}

// NewBitMap is a helper method to define mock.On call
//   - _a0 common.TxnID
func (_e *MockEngine_Expecter) NewBitMap(_a0 interface{}) *MockEngine_NewBitMap_Call {
	return &MockEngine_NewBitMap_Call{Call: _e.mock.On("NewBitMap", _a0)}
}

func (_c *MockEngine_NewBitMap_Call) Run(run func(_a0 common.TxnID)) *MockEngine_NewBitMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID))
	})
	return _c
}

func (_c *MockEngine_NewBitMap_Call) Return(_a0 BitMap, _a1 error) *MockEngine_NewBitMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_NewBitMap_Call) RunAndReturn(run func(common.TxnID) (BitMap, error)) *MockEngine_NewBitMap_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueue provides a mock function with given fields: _a0
func (_m *MockEngine) NewQueue(_a0 common.TxnID) (Queue, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewQueue")
	}

	var r0 Queue
	var r1 error
	if rf, ok := ret.Get(0).(func(common.TxnID) (Queue, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID) Queue); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Queue)
		}
	}

	if rf, ok := ret.Get(1).(func(common.TxnID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngine_NewQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewQueue'
type MockEngine_NewQueue_Call struct {
	*mock.Call
}

// NewQueue is a helper method to define mock.On call
//   - _a0 common.TxnID
func (_e *MockEngine_Expecter) NewQueue(_a0 interface{}) *MockEngine_NewQueue_Call {
	return &MockEngine_NewQueue_Call{Call: _e.mock.On("NewQueue", _a0)}
}

func (_c *MockEngine_NewQueue_Call) Run(run func(_a0 common.TxnID)) *MockEngine_NewQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID))
	})
	return _c
}

func (_c *MockEngine_NewQueue_Call) Return(_a0 Queue, _a1 error) *MockEngine_NewQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngine_NewQueue_Call) RunAndReturn(run func(common.TxnID) (Queue, error)) *MockEngine_NewQueue_Call {
	_c.Call.Return(run)
	return _c
}

// SelectEdge provides a mock function with given fields: txnID, edgeID, edgeFileToken, edgeSystemIndex, schema
func (_m *MockEngine) SelectEdge(txnID common.TxnID, edgeID EdgeSystemID, edgeFileToken *txns.FileLockToken, edgeSystemIndex Index, schema Schema) (EdgeSystemFields, map[string]interface{}, error) {
	ret := _m.Called(txnID, edgeID, edgeFileToken, edgeSystemIndex, schema)

	if len(ret) == 0 {
		panic("no return value specified for SelectEdge")
	}

	var r0 EdgeSystemFields
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(common.TxnID, EdgeSystemID, *txns.FileLockToken, Index, Schema) (EdgeSystemFields, map[string]interface{}, error)); ok {
		return rf(txnID, edgeID, edgeFileToken, edgeSystemIndex, schema)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, EdgeSystemID, *txns.FileLockToken, Index, Schema) EdgeSystemFields); ok {
		r0 = rf(txnID, edgeID, edgeFileToken, edgeSystemIndex, schema)
	} else {
		r0 = ret.Get(0).(EdgeSystemFields)
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, EdgeSystemID, *txns.FileLockToken, Index, Schema) map[string]interface{}); ok {
		r1 = rf(txnID, edgeID, edgeFileToken, edgeSystemIndex, schema)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(common.TxnID, EdgeSystemID, *txns.FileLockToken, Index, Schema) error); ok {
		r2 = rf(txnID, edgeID, edgeFileToken, edgeSystemIndex, schema)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockEngine_SelectEdge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectEdge'
type MockEngine_SelectEdge_Call struct {
	*mock.Call
}

// SelectEdge is a helper method to define mock.On call
//   - txnID common.TxnID
//   - edgeID EdgeSystemID
//   - edgeFileToken *txns.FileLockToken
//   - edgeSystemIndex Index
//   - schema Schema
func (_e *MockEngine_Expecter) SelectEdge(txnID interface{}, edgeID interface{}, edgeFileToken interface{}, edgeSystemIndex interface{}, schema interface{}) *MockEngine_SelectEdge_Call {
	return &MockEngine_SelectEdge_Call{Call: _e.mock.On("SelectEdge", txnID, edgeID, edgeFileToken, edgeSystemIndex, schema)}
}

func (_c *MockEngine_SelectEdge_Call) Run(run func(txnID common.TxnID, edgeID EdgeSystemID, edgeFileToken *txns.FileLockToken, edgeSystemIndex Index, schema Schema)) *MockEngine_SelectEdge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(EdgeSystemID), args[2].(*txns.FileLockToken), args[3].(Index), args[4].(Schema))
	})
	return _c
}

func (_c *MockEngine_SelectEdge_Call) Return(_a0 EdgeSystemFields, _a1 map[string]interface{}, _a2 error) *MockEngine_SelectEdge_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockEngine_SelectEdge_Call) RunAndReturn(run func(common.TxnID, EdgeSystemID, *txns.FileLockToken, Index, Schema) (EdgeSystemFields, map[string]interface{}, error)) *MockEngine_SelectEdge_Call {
	_c.Call.Return(run)
	return _c
}

// SelectVertex provides a mock function with given fields: txnID, vertexID, vertexIndex, schema
func (_m *MockEngine) SelectVertex(txnID common.TxnID, vertexID VertexSystemID, vertexIndex Index, schema Schema) (VertexSystemFields, map[string]interface{}, error) {
	ret := _m.Called(txnID, vertexID, vertexIndex, schema)

	if len(ret) == 0 {
		panic("no return value specified for SelectVertex")
	}

	var r0 VertexSystemFields
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, Index, Schema) (VertexSystemFields, map[string]interface{}, error)); ok {
		return rf(txnID, vertexID, vertexIndex, schema)
	}
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, Index, Schema) VertexSystemFields); ok {
		r0 = rf(txnID, vertexID, vertexIndex, schema)
	} else {
		r0 = ret.Get(0).(VertexSystemFields)
	}

	if rf, ok := ret.Get(1).(func(common.TxnID, VertexSystemID, Index, Schema) map[string]interface{}); ok {
		r1 = rf(txnID, vertexID, vertexIndex, schema)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(common.TxnID, VertexSystemID, Index, Schema) error); ok {
		r2 = rf(txnID, vertexID, vertexIndex, schema)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockEngine_SelectVertex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectVertex'
type MockEngine_SelectVertex_Call struct {
	*mock.Call
}

// SelectVertex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - vertexID VertexSystemID
//   - vertexIndex Index
//   - schema Schema
func (_e *MockEngine_Expecter) SelectVertex(txnID interface{}, vertexID interface{}, vertexIndex interface{}, schema interface{}) *MockEngine_SelectVertex_Call {
	return &MockEngine_SelectVertex_Call{Call: _e.mock.On("SelectVertex", txnID, vertexID, vertexIndex, schema)}
}

func (_c *MockEngine_SelectVertex_Call) Run(run func(txnID common.TxnID, vertexID VertexSystemID, vertexIndex Index, schema Schema)) *MockEngine_SelectVertex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(VertexSystemID), args[2].(Index), args[3].(Schema))
	})
	return _c
}

func (_c *MockEngine_SelectVertex_Call) Return(_a0 VertexSystemFields, _a1 map[string]interface{}, _a2 error) *MockEngine_SelectVertex_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockEngine_SelectVertex_Call) RunAndReturn(run func(common.TxnID, VertexSystemID, Index, Schema) (VertexSystemFields, map[string]interface{}, error)) *MockEngine_SelectVertex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEdge provides a mock function with given fields: txnID, edgeID, edgeFields, edgesFileToken, edgeSystemIndex, schema, ctxLogger
func (_m *MockEngine) UpdateEdge(txnID common.TxnID, edgeID EdgeSystemID, edgeFields map[string]interface{}, edgesFileToken *txns.FileLockToken, edgeSystemIndex Index, schema Schema, ctxLogger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, edgeID, edgeFields, edgesFileToken, edgeSystemIndex, schema, ctxLogger)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEdge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, EdgeSystemID, map[string]interface{}, *txns.FileLockToken, Index, Schema, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, edgeID, edgeFields, edgesFileToken, edgeSystemIndex, schema, ctxLogger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_UpdateEdge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEdge'
type MockEngine_UpdateEdge_Call struct {
	*mock.Call
}

// UpdateEdge is a helper method to define mock.On call
//   - txnID common.TxnID
//   - edgeID EdgeSystemID
//   - edgeFields map[string]interface{}
//   - edgesFileToken *txns.FileLockToken
//   - edgeSystemIndex Index
//   - schema Schema
//   - ctxLogger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) UpdateEdge(txnID interface{}, edgeID interface{}, edgeFields interface{}, edgesFileToken interface{}, edgeSystemIndex interface{}, schema interface{}, ctxLogger interface{}) *MockEngine_UpdateEdge_Call {
	return &MockEngine_UpdateEdge_Call{Call: _e.mock.On("UpdateEdge", txnID, edgeID, edgeFields, edgesFileToken, edgeSystemIndex, schema, ctxLogger)}
}

func (_c *MockEngine_UpdateEdge_Call) Run(run func(txnID common.TxnID, edgeID EdgeSystemID, edgeFields map[string]interface{}, edgesFileToken *txns.FileLockToken, edgeSystemIndex Index, schema Schema, ctxLogger common.ITxnLoggerWithContext)) *MockEngine_UpdateEdge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(EdgeSystemID), args[2].(map[string]interface{}), args[3].(*txns.FileLockToken), args[4].(Index), args[5].(Schema), args[6].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_UpdateEdge_Call) Return(_a0 error) *MockEngine_UpdateEdge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_UpdateEdge_Call) RunAndReturn(run func(common.TxnID, EdgeSystemID, map[string]interface{}, *txns.FileLockToken, Index, Schema, common.ITxnLoggerWithContext) error) *MockEngine_UpdateEdge_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVertex provides a mock function with given fields: txnID, vertexID, newData, schema, vertexFileToken, vertexIndex, ctxLogger
func (_m *MockEngine) UpdateVertex(txnID common.TxnID, vertexID VertexSystemID, newData map[string]interface{}, schema Schema, vertexFileToken *txns.FileLockToken, vertexIndex Index, ctxLogger common.ITxnLoggerWithContext) error {
	ret := _m.Called(txnID, vertexID, newData, schema, vertexFileToken, vertexIndex, ctxLogger)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVertex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.TxnID, VertexSystemID, map[string]interface{}, Schema, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) error); ok {
		r0 = rf(txnID, vertexID, newData, schema, vertexFileToken, vertexIndex, ctxLogger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_UpdateVertex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVertex'
type MockEngine_UpdateVertex_Call struct {
	*mock.Call
}

// UpdateVertex is a helper method to define mock.On call
//   - txnID common.TxnID
//   - vertexID VertexSystemID
//   - newData map[string]interface{}
//   - schema Schema
//   - vertexFileToken *txns.FileLockToken
//   - vertexIndex Index
//   - ctxLogger common.ITxnLoggerWithContext
func (_e *MockEngine_Expecter) UpdateVertex(txnID interface{}, vertexID interface{}, newData interface{}, schema interface{}, vertexFileToken interface{}, vertexIndex interface{}, ctxLogger interface{}) *MockEngine_UpdateVertex_Call {
	return &MockEngine_UpdateVertex_Call{Call: _e.mock.On("UpdateVertex", txnID, vertexID, newData, schema, vertexFileToken, vertexIndex, ctxLogger)}
}

func (_c *MockEngine_UpdateVertex_Call) Run(run func(txnID common.TxnID, vertexID VertexSystemID, newData map[string]interface{}, schema Schema, vertexFileToken *txns.FileLockToken, vertexIndex Index, ctxLogger common.ITxnLoggerWithContext)) *MockEngine_UpdateVertex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.TxnID), args[1].(VertexSystemID), args[2].(map[string]interface{}), args[3].(Schema), args[4].(*txns.FileLockToken), args[5].(Index), args[6].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockEngine_UpdateVertex_Call) Return(_a0 error) *MockEngine_UpdateVertex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_UpdateVertex_Call) RunAndReturn(run func(common.TxnID, VertexSystemID, map[string]interface{}, Schema, *txns.FileLockToken, Index, common.ITxnLoggerWithContext) error) *MockEngine_UpdateVertex_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEngine creates a new instance of MockEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngine {
	mock := &MockEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
