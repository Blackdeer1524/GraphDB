// Code generated by mockery v2.53.5. DO NOT EDIT.

package storage

import (
	common "github.com/Blackdeer1524/GraphDB/src/pkg/common"
	mock "github.com/stretchr/testify/mock"
)

// MockIndex is an autogenerated mock type for the Index type
type MockIndex struct {
	mock.Mock
}

type MockIndex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIndex) EXPECT() *MockIndex_Expecter {
	return &MockIndex_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockIndex) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndex_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockIndex_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockIndex_Expecter) Close() *MockIndex_Close_Call {
	return &MockIndex_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockIndex_Close_Call) Run(run func()) *MockIndex_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIndex_Close_Call) Return(_a0 error) *MockIndex_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndex_Close_Call) RunAndReturn(run func() error) *MockIndex_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *MockIndex) Delete(key []byte) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndex_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIndex_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key []byte
func (_e *MockIndex_Expecter) Delete(key interface{}) *MockIndex_Delete_Call {
	return &MockIndex_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockIndex_Delete_Call) Run(run func(key []byte)) *MockIndex_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockIndex_Delete_Call) Return(_a0 error) *MockIndex_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndex_Delete_Call) RunAndReturn(run func([]byte) error) *MockIndex_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockIndex) Get(key []byte) (common.RecordID, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 common.RecordID
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (common.RecordID, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) common.RecordID); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(common.RecordID)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndex_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIndex_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key []byte
func (_e *MockIndex_Expecter) Get(key interface{}) *MockIndex_Get_Call {
	return &MockIndex_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockIndex_Get_Call) Run(run func(key []byte)) *MockIndex_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockIndex_Get_Call) Return(_a0 common.RecordID, _a1 error) *MockIndex_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIndex_Get_Call) RunAndReturn(run func([]byte) (common.RecordID, error)) *MockIndex_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: key, rid
func (_m *MockIndex) Insert(key []byte, rid common.RecordID) error {
	ret := _m.Called(key, rid)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, common.RecordID) error); ok {
		r0 = rf(key, rid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndex_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockIndex_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - key []byte
//   - rid common.RecordID
func (_e *MockIndex_Expecter) Insert(key interface{}, rid interface{}) *MockIndex_Insert_Call {
	return &MockIndex_Insert_Call{Call: _e.mock.On("Insert", key, rid)}
}

func (_c *MockIndex_Insert_Call) Run(run func(key []byte, rid common.RecordID)) *MockIndex_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(common.RecordID))
	})
	return _c
}

func (_c *MockIndex_Insert_Call) Return(_a0 error) *MockIndex_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndex_Insert_Call) RunAndReturn(run func([]byte, common.RecordID) error) *MockIndex_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIndex creates a new instance of MockIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIndex {
	mock := &MockIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
