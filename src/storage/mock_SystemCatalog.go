// Code generated by mockery v2.53.5. DO NOT EDIT.

package storage

import (
	common "github.com/Blackdeer1524/GraphDB/src/pkg/common"
	mock "github.com/stretchr/testify/mock"
)

// MockSystemCatalog is an autogenerated mock type for the SystemCatalog type
type MockSystemCatalog struct {
	mock.Mock
}

type MockSystemCatalog_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSystemCatalog) EXPECT() *MockSystemCatalog_Expecter {
	return &MockSystemCatalog_Expecter{mock: &_m.Mock}
}

// AddDirIndex provides a mock function with given fields: index
func (_m *MockSystemCatalog) AddDirIndex(index IndexMeta) error {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for AddDirIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(IndexMeta) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_AddDirIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDirIndex'
type MockSystemCatalog_AddDirIndex_Call struct {
	*mock.Call
}

// AddDirIndex is a helper method to define mock.On call
//   - index IndexMeta
func (_e *MockSystemCatalog_Expecter) AddDirIndex(index interface{}) *MockSystemCatalog_AddDirIndex_Call {
	return &MockSystemCatalog_AddDirIndex_Call{Call: _e.mock.On("AddDirIndex", index)}
}

func (_c *MockSystemCatalog_AddDirIndex_Call) Run(run func(index IndexMeta)) *MockSystemCatalog_AddDirIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(IndexMeta))
	})
	return _c
}

func (_c *MockSystemCatalog_AddDirIndex_Call) Return(_a0 error) *MockSystemCatalog_AddDirIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_AddDirIndex_Call) RunAndReturn(run func(IndexMeta) error) *MockSystemCatalog_AddDirIndex_Call {
	_c.Call.Return(run)
	return _c
}

// AddDirTable provides a mock function with given fields: req
func (_m *MockSystemCatalog) AddDirTable(req DirTableMeta) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddDirTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(DirTableMeta) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_AddDirTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDirTable'
type MockSystemCatalog_AddDirTable_Call struct {
	*mock.Call
}

// AddDirTable is a helper method to define mock.On call
//   - req DirTableMeta
func (_e *MockSystemCatalog_Expecter) AddDirTable(req interface{}) *MockSystemCatalog_AddDirTable_Call {
	return &MockSystemCatalog_AddDirTable_Call{Call: _e.mock.On("AddDirTable", req)}
}

func (_c *MockSystemCatalog_AddDirTable_Call) Run(run func(req DirTableMeta)) *MockSystemCatalog_AddDirTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DirTableMeta))
	})
	return _c
}

func (_c *MockSystemCatalog_AddDirTable_Call) Return(_a0 error) *MockSystemCatalog_AddDirTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_AddDirTable_Call) RunAndReturn(run func(DirTableMeta) error) *MockSystemCatalog_AddDirTable_Call {
	_c.Call.Return(run)
	return _c
}

// AddEdgeIndex provides a mock function with given fields: index
func (_m *MockSystemCatalog) AddEdgeIndex(index IndexMeta) error {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for AddEdgeIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(IndexMeta) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_AddEdgeIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEdgeIndex'
type MockSystemCatalog_AddEdgeIndex_Call struct {
	*mock.Call
}

// AddEdgeIndex is a helper method to define mock.On call
//   - index IndexMeta
func (_e *MockSystemCatalog_Expecter) AddEdgeIndex(index interface{}) *MockSystemCatalog_AddEdgeIndex_Call {
	return &MockSystemCatalog_AddEdgeIndex_Call{Call: _e.mock.On("AddEdgeIndex", index)}
}

func (_c *MockSystemCatalog_AddEdgeIndex_Call) Run(run func(index IndexMeta)) *MockSystemCatalog_AddEdgeIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(IndexMeta))
	})
	return _c
}

func (_c *MockSystemCatalog_AddEdgeIndex_Call) Return(_a0 error) *MockSystemCatalog_AddEdgeIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_AddEdgeIndex_Call) RunAndReturn(run func(IndexMeta) error) *MockSystemCatalog_AddEdgeIndex_Call {
	_c.Call.Return(run)
	return _c
}

// AddEdgeTable provides a mock function with given fields: req
func (_m *MockSystemCatalog) AddEdgeTable(req EdgeTableMeta) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddEdgeTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(EdgeTableMeta) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_AddEdgeTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEdgeTable'
type MockSystemCatalog_AddEdgeTable_Call struct {
	*mock.Call
}

// AddEdgeTable is a helper method to define mock.On call
//   - req EdgeTableMeta
func (_e *MockSystemCatalog_Expecter) AddEdgeTable(req interface{}) *MockSystemCatalog_AddEdgeTable_Call {
	return &MockSystemCatalog_AddEdgeTable_Call{Call: _e.mock.On("AddEdgeTable", req)}
}

func (_c *MockSystemCatalog_AddEdgeTable_Call) Run(run func(req EdgeTableMeta)) *MockSystemCatalog_AddEdgeTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EdgeTableMeta))
	})
	return _c
}

func (_c *MockSystemCatalog_AddEdgeTable_Call) Return(_a0 error) *MockSystemCatalog_AddEdgeTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_AddEdgeTable_Call) RunAndReturn(run func(EdgeTableMeta) error) *MockSystemCatalog_AddEdgeTable_Call {
	_c.Call.Return(run)
	return _c
}

// AddVertexIndex provides a mock function with given fields: index
func (_m *MockSystemCatalog) AddVertexIndex(index IndexMeta) error {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for AddVertexIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(IndexMeta) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_AddVertexIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVertexIndex'
type MockSystemCatalog_AddVertexIndex_Call struct {
	*mock.Call
}

// AddVertexIndex is a helper method to define mock.On call
//   - index IndexMeta
func (_e *MockSystemCatalog_Expecter) AddVertexIndex(index interface{}) *MockSystemCatalog_AddVertexIndex_Call {
	return &MockSystemCatalog_AddVertexIndex_Call{Call: _e.mock.On("AddVertexIndex", index)}
}

func (_c *MockSystemCatalog_AddVertexIndex_Call) Run(run func(index IndexMeta)) *MockSystemCatalog_AddVertexIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(IndexMeta))
	})
	return _c
}

func (_c *MockSystemCatalog_AddVertexIndex_Call) Return(_a0 error) *MockSystemCatalog_AddVertexIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_AddVertexIndex_Call) RunAndReturn(run func(IndexMeta) error) *MockSystemCatalog_AddVertexIndex_Call {
	_c.Call.Return(run)
	return _c
}

// AddVertexTable provides a mock function with given fields: req
func (_m *MockSystemCatalog) AddVertexTable(req VertexTableMeta) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddVertexTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(VertexTableMeta) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_AddVertexTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVertexTable'
type MockSystemCatalog_AddVertexTable_Call struct {
	*mock.Call
}

// AddVertexTable is a helper method to define mock.On call
//   - req VertexTableMeta
func (_e *MockSystemCatalog_Expecter) AddVertexTable(req interface{}) *MockSystemCatalog_AddVertexTable_Call {
	return &MockSystemCatalog_AddVertexTable_Call{Call: _e.mock.On("AddVertexTable", req)}
}

func (_c *MockSystemCatalog_AddVertexTable_Call) Run(run func(req VertexTableMeta)) *MockSystemCatalog_AddVertexTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(VertexTableMeta))
	})
	return _c
}

func (_c *MockSystemCatalog_AddVertexTable_Call) Return(_a0 error) *MockSystemCatalog_AddVertexTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_AddVertexTable_Call) RunAndReturn(run func(VertexTableMeta) error) *MockSystemCatalog_AddVertexTable_Call {
	_c.Call.Return(run)
	return _c
}

// CommitChanges provides a mock function with given fields: logger
func (_m *MockSystemCatalog) CommitChanges(logger common.ITxnLoggerWithContext) error {
	ret := _m.Called(logger)

	if len(ret) == 0 {
		panic("no return value specified for CommitChanges")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.ITxnLoggerWithContext) error); ok {
		r0 = rf(logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_CommitChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitChanges'
type MockSystemCatalog_CommitChanges_Call struct {
	*mock.Call
}

// CommitChanges is a helper method to define mock.On call
//   - logger common.ITxnLoggerWithContext
func (_e *MockSystemCatalog_Expecter) CommitChanges(logger interface{}) *MockSystemCatalog_CommitChanges_Call {
	return &MockSystemCatalog_CommitChanges_Call{Call: _e.mock.On("CommitChanges", logger)}
}

func (_c *MockSystemCatalog_CommitChanges_Call) Run(run func(logger common.ITxnLoggerWithContext)) *MockSystemCatalog_CommitChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ITxnLoggerWithContext))
	})
	return _c
}

func (_c *MockSystemCatalog_CommitChanges_Call) Return(err error) *MockSystemCatalog_CommitChanges_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSystemCatalog_CommitChanges_Call) RunAndReturn(run func(common.ITxnLoggerWithContext) error) *MockSystemCatalog_CommitChanges_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentVersion provides a mock function with no fields
func (_m *MockSystemCatalog) CurrentVersion() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentVersion")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockSystemCatalog_CurrentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentVersion'
type MockSystemCatalog_CurrentVersion_Call struct {
	*mock.Call
}

// CurrentVersion is a helper method to define mock.On call
func (_e *MockSystemCatalog_Expecter) CurrentVersion() *MockSystemCatalog_CurrentVersion_Call {
	return &MockSystemCatalog_CurrentVersion_Call{Call: _e.mock.On("CurrentVersion")}
}

func (_c *MockSystemCatalog_CurrentVersion_Call) Run(run func()) *MockSystemCatalog_CurrentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemCatalog_CurrentVersion_Call) Return(_a0 uint64) *MockSystemCatalog_CurrentVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_CurrentVersion_Call) RunAndReturn(run func() uint64) *MockSystemCatalog_CurrentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DirIndexExists provides a mock function with given fields: name
func (_m *MockSystemCatalog) DirIndexExists(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DirIndexExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_DirIndexExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DirIndexExists'
type MockSystemCatalog_DirIndexExists_Call struct {
	*mock.Call
}

// DirIndexExists is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) DirIndexExists(name interface{}) *MockSystemCatalog_DirIndexExists_Call {
	return &MockSystemCatalog_DirIndexExists_Call{Call: _e.mock.On("DirIndexExists", name)}
}

func (_c *MockSystemCatalog_DirIndexExists_Call) Run(run func(name string)) *MockSystemCatalog_DirIndexExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_DirIndexExists_Call) Return(_a0 bool, _a1 error) *MockSystemCatalog_DirIndexExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_DirIndexExists_Call) RunAndReturn(run func(string) (bool, error)) *MockSystemCatalog_DirIndexExists_Call {
	_c.Call.Return(run)
	return _c
}

// DirTableExists provides a mock function with given fields: vertexTableID
func (_m *MockSystemCatalog) DirTableExists(vertexTableID common.FileID) (bool, error) {
	ret := _m.Called(vertexTableID)

	if len(ret) == 0 {
		panic("no return value specified for DirTableExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(common.FileID) (bool, error)); ok {
		return rf(vertexTableID)
	}
	if rf, ok := ret.Get(0).(func(common.FileID) bool); ok {
		r0 = rf(vertexTableID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(common.FileID) error); ok {
		r1 = rf(vertexTableID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_DirTableExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DirTableExists'
type MockSystemCatalog_DirTableExists_Call struct {
	*mock.Call
}

// DirTableExists is a helper method to define mock.On call
//   - vertexTableID common.FileID
func (_e *MockSystemCatalog_Expecter) DirTableExists(vertexTableID interface{}) *MockSystemCatalog_DirTableExists_Call {
	return &MockSystemCatalog_DirTableExists_Call{Call: _e.mock.On("DirTableExists", vertexTableID)}
}

func (_c *MockSystemCatalog_DirTableExists_Call) Run(run func(vertexTableID common.FileID)) *MockSystemCatalog_DirTableExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.FileID))
	})
	return _c
}

func (_c *MockSystemCatalog_DirTableExists_Call) Return(_a0 bool, _a1 error) *MockSystemCatalog_DirTableExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_DirTableExists_Call) RunAndReturn(run func(common.FileID) (bool, error)) *MockSystemCatalog_DirTableExists_Call {
	_c.Call.Return(run)
	return _c
}

// DropDirIndex provides a mock function with given fields: name
func (_m *MockSystemCatalog) DropDirIndex(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DropDirIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_DropDirIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDirIndex'
type MockSystemCatalog_DropDirIndex_Call struct {
	*mock.Call
}

// DropDirIndex is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) DropDirIndex(name interface{}) *MockSystemCatalog_DropDirIndex_Call {
	return &MockSystemCatalog_DropDirIndex_Call{Call: _e.mock.On("DropDirIndex", name)}
}

func (_c *MockSystemCatalog_DropDirIndex_Call) Run(run func(name string)) *MockSystemCatalog_DropDirIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_DropDirIndex_Call) Return(_a0 error) *MockSystemCatalog_DropDirIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_DropDirIndex_Call) RunAndReturn(run func(string) error) *MockSystemCatalog_DropDirIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DropDirTable provides a mock function with given fields: vertexTableID
func (_m *MockSystemCatalog) DropDirTable(vertexTableID common.FileID) error {
	ret := _m.Called(vertexTableID)

	if len(ret) == 0 {
		panic("no return value specified for DropDirTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.FileID) error); ok {
		r0 = rf(vertexTableID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_DropDirTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDirTable'
type MockSystemCatalog_DropDirTable_Call struct {
	*mock.Call
}

// DropDirTable is a helper method to define mock.On call
//   - vertexTableID common.FileID
func (_e *MockSystemCatalog_Expecter) DropDirTable(vertexTableID interface{}) *MockSystemCatalog_DropDirTable_Call {
	return &MockSystemCatalog_DropDirTable_Call{Call: _e.mock.On("DropDirTable", vertexTableID)}
}

func (_c *MockSystemCatalog_DropDirTable_Call) Run(run func(vertexTableID common.FileID)) *MockSystemCatalog_DropDirTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.FileID))
	})
	return _c
}

func (_c *MockSystemCatalog_DropDirTable_Call) Return(_a0 error) *MockSystemCatalog_DropDirTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_DropDirTable_Call) RunAndReturn(run func(common.FileID) error) *MockSystemCatalog_DropDirTable_Call {
	_c.Call.Return(run)
	return _c
}

// DropEdgeIndex provides a mock function with given fields: name
func (_m *MockSystemCatalog) DropEdgeIndex(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DropEdgeIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_DropEdgeIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropEdgeIndex'
type MockSystemCatalog_DropEdgeIndex_Call struct {
	*mock.Call
}

// DropEdgeIndex is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) DropEdgeIndex(name interface{}) *MockSystemCatalog_DropEdgeIndex_Call {
	return &MockSystemCatalog_DropEdgeIndex_Call{Call: _e.mock.On("DropEdgeIndex", name)}
}

func (_c *MockSystemCatalog_DropEdgeIndex_Call) Run(run func(name string)) *MockSystemCatalog_DropEdgeIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_DropEdgeIndex_Call) Return(_a0 error) *MockSystemCatalog_DropEdgeIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_DropEdgeIndex_Call) RunAndReturn(run func(string) error) *MockSystemCatalog_DropEdgeIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DropEdgeTable provides a mock function with given fields: name
func (_m *MockSystemCatalog) DropEdgeTable(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DropEdgeTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_DropEdgeTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropEdgeTable'
type MockSystemCatalog_DropEdgeTable_Call struct {
	*mock.Call
}

// DropEdgeTable is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) DropEdgeTable(name interface{}) *MockSystemCatalog_DropEdgeTable_Call {
	return &MockSystemCatalog_DropEdgeTable_Call{Call: _e.mock.On("DropEdgeTable", name)}
}

func (_c *MockSystemCatalog_DropEdgeTable_Call) Run(run func(name string)) *MockSystemCatalog_DropEdgeTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_DropEdgeTable_Call) Return(_a0 error) *MockSystemCatalog_DropEdgeTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_DropEdgeTable_Call) RunAndReturn(run func(string) error) *MockSystemCatalog_DropEdgeTable_Call {
	_c.Call.Return(run)
	return _c
}

// DropVertexIndex provides a mock function with given fields: name
func (_m *MockSystemCatalog) DropVertexIndex(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DropVertexIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_DropVertexIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropVertexIndex'
type MockSystemCatalog_DropVertexIndex_Call struct {
	*mock.Call
}

// DropVertexIndex is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) DropVertexIndex(name interface{}) *MockSystemCatalog_DropVertexIndex_Call {
	return &MockSystemCatalog_DropVertexIndex_Call{Call: _e.mock.On("DropVertexIndex", name)}
}

func (_c *MockSystemCatalog_DropVertexIndex_Call) Run(run func(name string)) *MockSystemCatalog_DropVertexIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_DropVertexIndex_Call) Return(_a0 error) *MockSystemCatalog_DropVertexIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_DropVertexIndex_Call) RunAndReturn(run func(string) error) *MockSystemCatalog_DropVertexIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DropVertexTable provides a mock function with given fields: name
func (_m *MockSystemCatalog) DropVertexTable(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DropVertexTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_DropVertexTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropVertexTable'
type MockSystemCatalog_DropVertexTable_Call struct {
	*mock.Call
}

// DropVertexTable is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) DropVertexTable(name interface{}) *MockSystemCatalog_DropVertexTable_Call {
	return &MockSystemCatalog_DropVertexTable_Call{Call: _e.mock.On("DropVertexTable", name)}
}

func (_c *MockSystemCatalog_DropVertexTable_Call) Run(run func(name string)) *MockSystemCatalog_DropVertexTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_DropVertexTable_Call) Return(_a0 error) *MockSystemCatalog_DropVertexTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_DropVertexTable_Call) RunAndReturn(run func(string) error) *MockSystemCatalog_DropVertexTable_Call {
	_c.Call.Return(run)
	return _c
}

// EdgeIndexExists provides a mock function with given fields: name
func (_m *MockSystemCatalog) EdgeIndexExists(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for EdgeIndexExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_EdgeIndexExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EdgeIndexExists'
type MockSystemCatalog_EdgeIndexExists_Call struct {
	*mock.Call
}

// EdgeIndexExists is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) EdgeIndexExists(name interface{}) *MockSystemCatalog_EdgeIndexExists_Call {
	return &MockSystemCatalog_EdgeIndexExists_Call{Call: _e.mock.On("EdgeIndexExists", name)}
}

func (_c *MockSystemCatalog_EdgeIndexExists_Call) Run(run func(name string)) *MockSystemCatalog_EdgeIndexExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_EdgeIndexExists_Call) Return(_a0 bool, _a1 error) *MockSystemCatalog_EdgeIndexExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_EdgeIndexExists_Call) RunAndReturn(run func(string) (bool, error)) *MockSystemCatalog_EdgeIndexExists_Call {
	_c.Call.Return(run)
	return _c
}

// EdgeTableExists provides a mock function with given fields: name
func (_m *MockSystemCatalog) EdgeTableExists(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for EdgeTableExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_EdgeTableExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EdgeTableExists'
type MockSystemCatalog_EdgeTableExists_Call struct {
	*mock.Call
}

// EdgeTableExists is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) EdgeTableExists(name interface{}) *MockSystemCatalog_EdgeTableExists_Call {
	return &MockSystemCatalog_EdgeTableExists_Call{Call: _e.mock.On("EdgeTableExists", name)}
}

func (_c *MockSystemCatalog_EdgeTableExists_Call) Run(run func(name string)) *MockSystemCatalog_EdgeTableExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_EdgeTableExists_Call) Return(_a0 bool, _a1 error) *MockSystemCatalog_EdgeTableExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_EdgeTableExists_Call) RunAndReturn(run func(string) (bool, error)) *MockSystemCatalog_EdgeTableExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetBasePath provides a mock function with no fields
func (_m *MockSystemCatalog) GetBasePath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBasePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSystemCatalog_GetBasePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBasePath'
type MockSystemCatalog_GetBasePath_Call struct {
	*mock.Call
}

// GetBasePath is a helper method to define mock.On call
func (_e *MockSystemCatalog_Expecter) GetBasePath() *MockSystemCatalog_GetBasePath_Call {
	return &MockSystemCatalog_GetBasePath_Call{Call: _e.mock.On("GetBasePath")}
}

func (_c *MockSystemCatalog_GetBasePath_Call) Run(run func()) *MockSystemCatalog_GetBasePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemCatalog_GetBasePath_Call) Return(_a0 string) *MockSystemCatalog_GetBasePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_GetBasePath_Call) RunAndReturn(run func() string) *MockSystemCatalog_GetBasePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirIndexMeta provides a mock function with given fields: name
func (_m *MockSystemCatalog) GetDirIndexMeta(name string) (IndexMeta, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetDirIndexMeta")
	}

	var r0 IndexMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (IndexMeta, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) IndexMeta); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(IndexMeta)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_GetDirIndexMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirIndexMeta'
type MockSystemCatalog_GetDirIndexMeta_Call struct {
	*mock.Call
}

// GetDirIndexMeta is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) GetDirIndexMeta(name interface{}) *MockSystemCatalog_GetDirIndexMeta_Call {
	return &MockSystemCatalog_GetDirIndexMeta_Call{Call: _e.mock.On("GetDirIndexMeta", name)}
}

func (_c *MockSystemCatalog_GetDirIndexMeta_Call) Run(run func(name string)) *MockSystemCatalog_GetDirIndexMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_GetDirIndexMeta_Call) Return(_a0 IndexMeta, _a1 error) *MockSystemCatalog_GetDirIndexMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_GetDirIndexMeta_Call) RunAndReturn(run func(string) (IndexMeta, error)) *MockSystemCatalog_GetDirIndexMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirTableMeta provides a mock function with given fields: vertexTableID
func (_m *MockSystemCatalog) GetDirTableMeta(vertexTableID common.FileID) (DirTableMeta, error) {
	ret := _m.Called(vertexTableID)

	if len(ret) == 0 {
		panic("no return value specified for GetDirTableMeta")
	}

	var r0 DirTableMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(common.FileID) (DirTableMeta, error)); ok {
		return rf(vertexTableID)
	}
	if rf, ok := ret.Get(0).(func(common.FileID) DirTableMeta); ok {
		r0 = rf(vertexTableID)
	} else {
		r0 = ret.Get(0).(DirTableMeta)
	}

	if rf, ok := ret.Get(1).(func(common.FileID) error); ok {
		r1 = rf(vertexTableID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_GetDirTableMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirTableMeta'
type MockSystemCatalog_GetDirTableMeta_Call struct {
	*mock.Call
}

// GetDirTableMeta is a helper method to define mock.On call
//   - vertexTableID common.FileID
func (_e *MockSystemCatalog_Expecter) GetDirTableMeta(vertexTableID interface{}) *MockSystemCatalog_GetDirTableMeta_Call {
	return &MockSystemCatalog_GetDirTableMeta_Call{Call: _e.mock.On("GetDirTableMeta", vertexTableID)}
}

func (_c *MockSystemCatalog_GetDirTableMeta_Call) Run(run func(vertexTableID common.FileID)) *MockSystemCatalog_GetDirTableMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.FileID))
	})
	return _c
}

func (_c *MockSystemCatalog_GetDirTableMeta_Call) Return(_a0 DirTableMeta, _a1 error) *MockSystemCatalog_GetDirTableMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_GetDirTableMeta_Call) RunAndReturn(run func(common.FileID) (DirTableMeta, error)) *MockSystemCatalog_GetDirTableMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeIndexMeta provides a mock function with given fields: name
func (_m *MockSystemCatalog) GetEdgeIndexMeta(name string) (IndexMeta, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeIndexMeta")
	}

	var r0 IndexMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (IndexMeta, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) IndexMeta); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(IndexMeta)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_GetEdgeIndexMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeIndexMeta'
type MockSystemCatalog_GetEdgeIndexMeta_Call struct {
	*mock.Call
}

// GetEdgeIndexMeta is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) GetEdgeIndexMeta(name interface{}) *MockSystemCatalog_GetEdgeIndexMeta_Call {
	return &MockSystemCatalog_GetEdgeIndexMeta_Call{Call: _e.mock.On("GetEdgeIndexMeta", name)}
}

func (_c *MockSystemCatalog_GetEdgeIndexMeta_Call) Run(run func(name string)) *MockSystemCatalog_GetEdgeIndexMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_GetEdgeIndexMeta_Call) Return(_a0 IndexMeta, _a1 error) *MockSystemCatalog_GetEdgeIndexMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_GetEdgeIndexMeta_Call) RunAndReturn(run func(string) (IndexMeta, error)) *MockSystemCatalog_GetEdgeIndexMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeTableIndexes provides a mock function with given fields: name
func (_m *MockSystemCatalog) GetEdgeTableIndexes(name string) ([]IndexMeta, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeTableIndexes")
	}

	var r0 []IndexMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]IndexMeta, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []IndexMeta); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]IndexMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_GetEdgeTableIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeTableIndexes'
type MockSystemCatalog_GetEdgeTableIndexes_Call struct {
	*mock.Call
}

// GetEdgeTableIndexes is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) GetEdgeTableIndexes(name interface{}) *MockSystemCatalog_GetEdgeTableIndexes_Call {
	return &MockSystemCatalog_GetEdgeTableIndexes_Call{Call: _e.mock.On("GetEdgeTableIndexes", name)}
}

func (_c *MockSystemCatalog_GetEdgeTableIndexes_Call) Run(run func(name string)) *MockSystemCatalog_GetEdgeTableIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_GetEdgeTableIndexes_Call) Return(_a0 []IndexMeta, _a1 error) *MockSystemCatalog_GetEdgeTableIndexes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_GetEdgeTableIndexes_Call) RunAndReturn(run func(string) ([]IndexMeta, error)) *MockSystemCatalog_GetEdgeTableIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeTableMeta provides a mock function with given fields: name
func (_m *MockSystemCatalog) GetEdgeTableMeta(name string) (EdgeTableMeta, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeTableMeta")
	}

	var r0 EdgeTableMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (EdgeTableMeta, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) EdgeTableMeta); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(EdgeTableMeta)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_GetEdgeTableMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeTableMeta'
type MockSystemCatalog_GetEdgeTableMeta_Call struct {
	*mock.Call
}

// GetEdgeTableMeta is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) GetEdgeTableMeta(name interface{}) *MockSystemCatalog_GetEdgeTableMeta_Call {
	return &MockSystemCatalog_GetEdgeTableMeta_Call{Call: _e.mock.On("GetEdgeTableMeta", name)}
}

func (_c *MockSystemCatalog_GetEdgeTableMeta_Call) Run(run func(name string)) *MockSystemCatalog_GetEdgeTableMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_GetEdgeTableMeta_Call) Return(_a0 EdgeTableMeta, _a1 error) *MockSystemCatalog_GetEdgeTableMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_GetEdgeTableMeta_Call) RunAndReturn(run func(string) (EdgeTableMeta, error)) *MockSystemCatalog_GetEdgeTableMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetEdgeTableNameByFileID provides a mock function with given fields: fileID
func (_m *MockSystemCatalog) GetEdgeTableNameByFileID(fileID common.FileID) (string, error) {
	ret := _m.Called(fileID)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeTableNameByFileID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(common.FileID) (string, error)); ok {
		return rf(fileID)
	}
	if rf, ok := ret.Get(0).(func(common.FileID) string); ok {
		r0 = rf(fileID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(common.FileID) error); ok {
		r1 = rf(fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_GetEdgeTableNameByFileID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEdgeTableNameByFileID'
type MockSystemCatalog_GetEdgeTableNameByFileID_Call struct {
	*mock.Call
}

// GetEdgeTableNameByFileID is a helper method to define mock.On call
//   - fileID common.FileID
func (_e *MockSystemCatalog_Expecter) GetEdgeTableNameByFileID(fileID interface{}) *MockSystemCatalog_GetEdgeTableNameByFileID_Call {
	return &MockSystemCatalog_GetEdgeTableNameByFileID_Call{Call: _e.mock.On("GetEdgeTableNameByFileID", fileID)}
}

func (_c *MockSystemCatalog_GetEdgeTableNameByFileID_Call) Run(run func(fileID common.FileID)) *MockSystemCatalog_GetEdgeTableNameByFileID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.FileID))
	})
	return _c
}

func (_c *MockSystemCatalog_GetEdgeTableNameByFileID_Call) Return(_a0 string, _a1 error) *MockSystemCatalog_GetEdgeTableNameByFileID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_GetEdgeTableNameByFileID_Call) RunAndReturn(run func(common.FileID) (string, error)) *MockSystemCatalog_GetEdgeTableNameByFileID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileIDToPathMap provides a mock function with no fields
func (_m *MockSystemCatalog) GetFileIDToPathMap() map[common.FileID]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFileIDToPathMap")
	}

	var r0 map[common.FileID]string
	if rf, ok := ret.Get(0).(func() map[common.FileID]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.FileID]string)
		}
	}

	return r0
}

// MockSystemCatalog_GetFileIDToPathMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileIDToPathMap'
type MockSystemCatalog_GetFileIDToPathMap_Call struct {
	*mock.Call
}

// GetFileIDToPathMap is a helper method to define mock.On call
func (_e *MockSystemCatalog_Expecter) GetFileIDToPathMap() *MockSystemCatalog_GetFileIDToPathMap_Call {
	return &MockSystemCatalog_GetFileIDToPathMap_Call{Call: _e.mock.On("GetFileIDToPathMap")}
}

func (_c *MockSystemCatalog_GetFileIDToPathMap_Call) Run(run func()) *MockSystemCatalog_GetFileIDToPathMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemCatalog_GetFileIDToPathMap_Call) Return(_a0 map[common.FileID]string) *MockSystemCatalog_GetFileIDToPathMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_GetFileIDToPathMap_Call) RunAndReturn(run func() map[common.FileID]string) *MockSystemCatalog_GetFileIDToPathMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewFileID provides a mock function with no fields
func (_m *MockSystemCatalog) GetNewFileID() common.FileID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNewFileID")
	}

	var r0 common.FileID
	if rf, ok := ret.Get(0).(func() common.FileID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.FileID)
	}

	return r0
}

// MockSystemCatalog_GetNewFileID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewFileID'
type MockSystemCatalog_GetNewFileID_Call struct {
	*mock.Call
}

// GetNewFileID is a helper method to define mock.On call
func (_e *MockSystemCatalog_Expecter) GetNewFileID() *MockSystemCatalog_GetNewFileID_Call {
	return &MockSystemCatalog_GetNewFileID_Call{Call: _e.mock.On("GetNewFileID")}
}

func (_c *MockSystemCatalog_GetNewFileID_Call) Run(run func()) *MockSystemCatalog_GetNewFileID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemCatalog_GetNewFileID_Call) Return(_a0 common.FileID) *MockSystemCatalog_GetNewFileID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_GetNewFileID_Call) RunAndReturn(run func() common.FileID) *MockSystemCatalog_GetNewFileID_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexTableIndexMeta provides a mock function with given fields: name
func (_m *MockSystemCatalog) GetVertexTableIndexMeta(name string) (IndexMeta, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexTableIndexMeta")
	}

	var r0 IndexMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (IndexMeta, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) IndexMeta); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(IndexMeta)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_GetVertexTableIndexMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexTableIndexMeta'
type MockSystemCatalog_GetVertexTableIndexMeta_Call struct {
	*mock.Call
}

// GetVertexTableIndexMeta is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) GetVertexTableIndexMeta(name interface{}) *MockSystemCatalog_GetVertexTableIndexMeta_Call {
	return &MockSystemCatalog_GetVertexTableIndexMeta_Call{Call: _e.mock.On("GetVertexTableIndexMeta", name)}
}

func (_c *MockSystemCatalog_GetVertexTableIndexMeta_Call) Run(run func(name string)) *MockSystemCatalog_GetVertexTableIndexMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_GetVertexTableIndexMeta_Call) Return(_a0 IndexMeta, _a1 error) *MockSystemCatalog_GetVertexTableIndexMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_GetVertexTableIndexMeta_Call) RunAndReturn(run func(string) (IndexMeta, error)) *MockSystemCatalog_GetVertexTableIndexMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexTableIndexes provides a mock function with given fields: name
func (_m *MockSystemCatalog) GetVertexTableIndexes(name string) ([]IndexMeta, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexTableIndexes")
	}

	var r0 []IndexMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]IndexMeta, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []IndexMeta); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]IndexMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_GetVertexTableIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexTableIndexes'
type MockSystemCatalog_GetVertexTableIndexes_Call struct {
	*mock.Call
}

// GetVertexTableIndexes is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) GetVertexTableIndexes(name interface{}) *MockSystemCatalog_GetVertexTableIndexes_Call {
	return &MockSystemCatalog_GetVertexTableIndexes_Call{Call: _e.mock.On("GetVertexTableIndexes", name)}
}

func (_c *MockSystemCatalog_GetVertexTableIndexes_Call) Run(run func(name string)) *MockSystemCatalog_GetVertexTableIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_GetVertexTableIndexes_Call) Return(_a0 []IndexMeta, _a1 error) *MockSystemCatalog_GetVertexTableIndexes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_GetVertexTableIndexes_Call) RunAndReturn(run func(string) ([]IndexMeta, error)) *MockSystemCatalog_GetVertexTableIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexTableMeta provides a mock function with given fields: name
func (_m *MockSystemCatalog) GetVertexTableMeta(name string) (VertexTableMeta, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexTableMeta")
	}

	var r0 VertexTableMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (VertexTableMeta, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) VertexTableMeta); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(VertexTableMeta)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_GetVertexTableMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexTableMeta'
type MockSystemCatalog_GetVertexTableMeta_Call struct {
	*mock.Call
}

// GetVertexTableMeta is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) GetVertexTableMeta(name interface{}) *MockSystemCatalog_GetVertexTableMeta_Call {
	return &MockSystemCatalog_GetVertexTableMeta_Call{Call: _e.mock.On("GetVertexTableMeta", name)}
}

func (_c *MockSystemCatalog_GetVertexTableMeta_Call) Run(run func(name string)) *MockSystemCatalog_GetVertexTableMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_GetVertexTableMeta_Call) Return(_a0 VertexTableMeta, _a1 error) *MockSystemCatalog_GetVertexTableMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_GetVertexTableMeta_Call) RunAndReturn(run func(string) (VertexTableMeta, error)) *MockSystemCatalog_GetVertexTableMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetVertexTableNameByFileID provides a mock function with given fields: fileID
func (_m *MockSystemCatalog) GetVertexTableNameByFileID(fileID common.FileID) (string, error) {
	ret := _m.Called(fileID)

	if len(ret) == 0 {
		panic("no return value specified for GetVertexTableNameByFileID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(common.FileID) (string, error)); ok {
		return rf(fileID)
	}
	if rf, ok := ret.Get(0).(func(common.FileID) string); ok {
		r0 = rf(fileID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(common.FileID) error); ok {
		r1 = rf(fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_GetVertexTableNameByFileID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVertexTableNameByFileID'
type MockSystemCatalog_GetVertexTableNameByFileID_Call struct {
	*mock.Call
}

// GetVertexTableNameByFileID is a helper method to define mock.On call
//   - fileID common.FileID
func (_e *MockSystemCatalog_Expecter) GetVertexTableNameByFileID(fileID interface{}) *MockSystemCatalog_GetVertexTableNameByFileID_Call {
	return &MockSystemCatalog_GetVertexTableNameByFileID_Call{Call: _e.mock.On("GetVertexTableNameByFileID", fileID)}
}

func (_c *MockSystemCatalog_GetVertexTableNameByFileID_Call) Run(run func(fileID common.FileID)) *MockSystemCatalog_GetVertexTableNameByFileID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.FileID))
	})
	return _c
}

func (_c *MockSystemCatalog_GetVertexTableNameByFileID_Call) Return(_a0 string, _a1 error) *MockSystemCatalog_GetVertexTableNameByFileID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_GetVertexTableNameByFileID_Call) RunAndReturn(run func(common.FileID) (string, error)) *MockSystemCatalog_GetVertexTableNameByFileID_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with no fields
func (_m *MockSystemCatalog) Load() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemCatalog_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockSystemCatalog_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *MockSystemCatalog_Expecter) Load() *MockSystemCatalog_Load_Call {
	return &MockSystemCatalog_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *MockSystemCatalog_Load_Call) Run(run func()) *MockSystemCatalog_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemCatalog_Load_Call) Return(_a0 error) *MockSystemCatalog_Load_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemCatalog_Load_Call) RunAndReturn(run func() error) *MockSystemCatalog_Load_Call {
	_c.Call.Return(run)
	return _c
}

// VertexIndexExists provides a mock function with given fields: name
func (_m *MockSystemCatalog) VertexIndexExists(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for VertexIndexExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_VertexIndexExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VertexIndexExists'
type MockSystemCatalog_VertexIndexExists_Call struct {
	*mock.Call
}

// VertexIndexExists is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) VertexIndexExists(name interface{}) *MockSystemCatalog_VertexIndexExists_Call {
	return &MockSystemCatalog_VertexIndexExists_Call{Call: _e.mock.On("VertexIndexExists", name)}
}

func (_c *MockSystemCatalog_VertexIndexExists_Call) Run(run func(name string)) *MockSystemCatalog_VertexIndexExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_VertexIndexExists_Call) Return(_a0 bool, _a1 error) *MockSystemCatalog_VertexIndexExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_VertexIndexExists_Call) RunAndReturn(run func(string) (bool, error)) *MockSystemCatalog_VertexIndexExists_Call {
	_c.Call.Return(run)
	return _c
}

// VertexTableExists provides a mock function with given fields: name
func (_m *MockSystemCatalog) VertexTableExists(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for VertexTableExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemCatalog_VertexTableExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VertexTableExists'
type MockSystemCatalog_VertexTableExists_Call struct {
	*mock.Call
}

// VertexTableExists is a helper method to define mock.On call
//   - name string
func (_e *MockSystemCatalog_Expecter) VertexTableExists(name interface{}) *MockSystemCatalog_VertexTableExists_Call {
	return &MockSystemCatalog_VertexTableExists_Call{Call: _e.mock.On("VertexTableExists", name)}
}

func (_c *MockSystemCatalog_VertexTableExists_Call) Run(run func(name string)) *MockSystemCatalog_VertexTableExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSystemCatalog_VertexTableExists_Call) Return(_a0 bool, _a1 error) *MockSystemCatalog_VertexTableExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemCatalog_VertexTableExists_Call) RunAndReturn(run func(string) (bool, error)) *MockSystemCatalog_VertexTableExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSystemCatalog creates a new instance of MockSystemCatalog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSystemCatalog(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSystemCatalog {
	mock := &MockSystemCatalog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
