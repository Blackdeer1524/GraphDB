// Code generated by mockery v2.53.5. DO NOT EDIT.

package common

import mock "github.com/stretchr/testify/mock"

// MockITxnLogger is an autogenerated mock type for the ITxnLogger type
type MockITxnLogger struct {
	mock.Mock
}

type MockITxnLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITxnLogger) EXPECT() *MockITxnLogger_Expecter {
	return &MockITxnLogger_Expecter{mock: &_m.Mock}
}

// GetFlushInfo provides a mock function with no fields
func (_m *MockITxnLogger) GetFlushInfo() (FileID, PageID, PageID, LSN) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFlushInfo")
	}

	var r0 FileID
	var r1 PageID
	var r2 PageID
	var r3 LSN
	if rf, ok := ret.Get(0).(func() (FileID, PageID, PageID, LSN)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() FileID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(FileID)
	}

	if rf, ok := ret.Get(1).(func() PageID); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(PageID)
	}

	if rf, ok := ret.Get(2).(func() PageID); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(PageID)
	}

	if rf, ok := ret.Get(3).(func() LSN); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(LSN)
	}

	return r0, r1, r2, r3
}

// MockITxnLogger_GetFlushInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlushInfo'
type MockITxnLogger_GetFlushInfo_Call struct {
	*mock.Call
}

// GetFlushInfo is a helper method to define mock.On call
func (_e *MockITxnLogger_Expecter) GetFlushInfo() *MockITxnLogger_GetFlushInfo_Call {
	return &MockITxnLogger_GetFlushInfo_Call{Call: _e.mock.On("GetFlushInfo")}
}

func (_c *MockITxnLogger_GetFlushInfo_Call) Run(run func()) *MockITxnLogger_GetFlushInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockITxnLogger_GetFlushInfo_Call) Return(_a0 FileID, _a1 PageID, _a2 PageID, _a3 LSN) *MockITxnLogger_GetFlushInfo_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockITxnLogger_GetFlushInfo_Call) RunAndReturn(run func() (FileID, PageID, PageID, LSN)) *MockITxnLogger_GetFlushInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlushLSN provides a mock function with no fields
func (_m *MockITxnLogger) GetFlushLSN() LSN {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFlushLSN")
	}

	var r0 LSN
	if rf, ok := ret.Get(0).(func() LSN); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(LSN)
	}

	return r0
}

// MockITxnLogger_GetFlushLSN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlushLSN'
type MockITxnLogger_GetFlushLSN_Call struct {
	*mock.Call
}

// GetFlushLSN is a helper method to define mock.On call
func (_e *MockITxnLogger_Expecter) GetFlushLSN() *MockITxnLogger_GetFlushLSN_Call {
	return &MockITxnLogger_GetFlushLSN_Call{Call: _e.mock.On("GetFlushLSN")}
}

func (_c *MockITxnLogger_GetFlushLSN_Call) Run(run func()) *MockITxnLogger_GetFlushLSN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockITxnLogger_GetFlushLSN_Call) Return(_a0 LSN) *MockITxnLogger_GetFlushLSN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockITxnLogger_GetFlushLSN_Call) RunAndReturn(run func() LSN) *MockITxnLogger_GetFlushLSN_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFirstUnflushedPage provides a mock function with given fields: pageID
func (_m *MockITxnLogger) UpdateFirstUnflushedPage(pageID PageID) {
	_m.Called(pageID)
}

// MockITxnLogger_UpdateFirstUnflushedPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFirstUnflushedPage'
type MockITxnLogger_UpdateFirstUnflushedPage_Call struct {
	*mock.Call
}

// UpdateFirstUnflushedPage is a helper method to define mock.On call
//   - pageID PageID
func (_e *MockITxnLogger_Expecter) UpdateFirstUnflushedPage(pageID interface{}) *MockITxnLogger_UpdateFirstUnflushedPage_Call {
	return &MockITxnLogger_UpdateFirstUnflushedPage_Call{Call: _e.mock.On("UpdateFirstUnflushedPage", pageID)}
}

func (_c *MockITxnLogger_UpdateFirstUnflushedPage_Call) Run(run func(pageID PageID)) *MockITxnLogger_UpdateFirstUnflushedPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(PageID))
	})
	return _c
}

func (_c *MockITxnLogger_UpdateFirstUnflushedPage_Call) Return() *MockITxnLogger_UpdateFirstUnflushedPage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockITxnLogger_UpdateFirstUnflushedPage_Call) RunAndReturn(run func(PageID)) *MockITxnLogger_UpdateFirstUnflushedPage_Call {
	_c.Run(run)
	return _c
}

// UpdateFlushLSN provides a mock function with given fields: lsn
func (_m *MockITxnLogger) UpdateFlushLSN(lsn LSN) {
	_m.Called(lsn)
}

// MockITxnLogger_UpdateFlushLSN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFlushLSN'
type MockITxnLogger_UpdateFlushLSN_Call struct {
	*mock.Call
}

// UpdateFlushLSN is a helper method to define mock.On call
//   - lsn LSN
func (_e *MockITxnLogger_Expecter) UpdateFlushLSN(lsn interface{}) *MockITxnLogger_UpdateFlushLSN_Call {
	return &MockITxnLogger_UpdateFlushLSN_Call{Call: _e.mock.On("UpdateFlushLSN", lsn)}
}

func (_c *MockITxnLogger_UpdateFlushLSN_Call) Run(run func(lsn LSN)) *MockITxnLogger_UpdateFlushLSN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(LSN))
	})
	return _c
}

func (_c *MockITxnLogger_UpdateFlushLSN_Call) Return() *MockITxnLogger_UpdateFlushLSN_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockITxnLogger_UpdateFlushLSN_Call) RunAndReturn(run func(LSN)) *MockITxnLogger_UpdateFlushLSN_Call {
	_c.Run(run)
	return _c
}

// WithContext provides a mock function with given fields: txnID
func (_m *MockITxnLogger) WithContext(txnID TxnID) ITxnLoggerWithContext {
	ret := _m.Called(txnID)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 ITxnLoggerWithContext
	if rf, ok := ret.Get(0).(func(TxnID) ITxnLoggerWithContext); ok {
		r0 = rf(txnID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ITxnLoggerWithContext)
		}
	}

	return r0
}

// MockITxnLogger_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type MockITxnLogger_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - txnID TxnID
func (_e *MockITxnLogger_Expecter) WithContext(txnID interface{}) *MockITxnLogger_WithContext_Call {
	return &MockITxnLogger_WithContext_Call{Call: _e.mock.On("WithContext", txnID)}
}

func (_c *MockITxnLogger_WithContext_Call) Run(run func(txnID TxnID)) *MockITxnLogger_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TxnID))
	})
	return _c
}

func (_c *MockITxnLogger_WithContext_Call) Return(_a0 ITxnLoggerWithContext) *MockITxnLogger_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockITxnLogger_WithContext_Call) RunAndReturn(run func(TxnID) ITxnLoggerWithContext) *MockITxnLogger_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockITxnLogger creates a new instance of MockITxnLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockITxnLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockITxnLogger {
	mock := &MockITxnLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
